---
title: "Introduction to regression models (Part II): include numeric predictors"
description: "Learn how to include numeric predictors in your regression models"
author: "Stefano Coretta"
date: 2024-07-26
execute: 
  freeze: auto
---

::: callout-warning
## Prerequisites

- [Introduction to regression models](intro-regression.qmd).
:::

## A straight line

A regression model is a statistical model that estimates the relationship between an outcome variable and one or more predictor variables (more on outcome/predictor below).

Regression models are based on the **formula of a straight line**.

$$
y = \alpha + \beta * x
$$

### Back to school

You might remember from school when you were asked to find the values of $y$ given certain values of $x$ and specific values of $\alpha$ and $\beta$.^[Depending on which country you did your schooling in, you might be used to slightly different notation, like $mx + c$. In $mx + c$, $m$ is $\beta$ and $c$ is $\alpha$.].

For example, you were given the following formula of a line:

$$
y = 3 + 2 * x
$$

and the values $x = (2, 4, 5, 8, 10, 23, 36)$. The homework was to calculate the values of $y$ and maybe plot them on a Cartesian coordinate space.

```{r}
#| label: homerwork

library(tidyverse)

line <- tibble(
  x = c(2, 4, 5, 8, 10, 23, 36),
  y = 3 + 2 * x
)

ggplot(line, aes(x, y)) +
  geom_point(size = 4) +
  geom_line(colour = "red") +
  labs(title = bquote(italic(y) == 3 + 2 * italic(x)))
```

Using the formula, we are able to find the values of $y$. Note that in $y = 3 + 2 * x$, $\alpha = 3$ and $\beta = 2$. Importantly, $\alpha$ is the value of $y$ when $x = 0$. $\alpha$ is commonly called the **intercept** of the line.

$$
\begin{align}
y & = 3 + 2 * x\\
& = 3 + 2 * 0\\
& = 3\\
\end{align}
$$

And $\beta$ is the number to add to 3 for each **unit increase of $x$**. $\beta$ is commonly called the **slope** of the line.

$$
\begin{align}
y & = 3 + 2 * x\\
& = 3 + 2 * 1 = 3 + 2 = 5\\
& = 3 + 2 * 2 = 3 + (2 + 2) = 7\\
& = 3 + 2 * 3 = 3 + (2 + 2 + 2) = 9\\
\end{align}
$$

The following plot should clarify.

```{r}
#| label: unit-increase
#| echo: false

line <- tibble(
  x = 0:3,
  y = 3 + 2 * x
)

ggplot(line, aes(x, y)) +
  geom_point(size = 4) +
  geom_line(colour = "red") +
  annotate("path", x = c(0, 0, 1), y = c(3, 5, 5), linetype = "dashed") +
  annotate("path", x = c(1, 1, 2), y = c(5, 7, 7), linetype = "dashed") +
  annotate("path", x = c(2, 2, 3), y = c(7, 9, 9), linetype = "dashed") +
  annotate("text", x = 0.25, y = 4.25, label = "+2") +
  annotate("text", x = 1.25, y = 6.25, label = "+2") +
  annotate("text", x = 2.25, y = 8.25, label = "+2") +
  scale_y_continuous(breaks = 0:15) +
  labs(title = bquote(italic(y) == 3 + 2 * italic(x)))
```

In the plot, the dashed line indicates the increase in $y$ for every unit increase of $x$ (i.e., every time $x$ increases by 1, $y$ increases by 2).

Now, in the context of research, you usually measure $x$ (the predictor variable) and $y$ (the outcome variable). Then you have to estimate $\alpha$ and $\beta$.

This is what regression models are for: given the measured $y$ and $x$, the model estimates $\alpha$ and $\beta$.

You can play around with [this web app](https://stefanocoretta.shinyapps.io/lines/) by changing the intercept and slope of the line. Note the alternative notation:

- The intercept is $\beta_0$ rather than $\alpha$.
- The slope is $\beta_1$ rather than $\beta$.

Let's use this alternative notation going forward (using $\beta$'s with subscript indexes will help understand the process of extracting information from regression models).

## Add some error...

Of course, measurements are noisy: they usually contain some error. Error can have many different causes, but we are usually not interested in learning about those causes. Rather, we just want our model to be able to deal with error.

Look at the following plot. The plot shows measurements of $x$ and $y$. The points corresponding to the observed measurements are almost on a straight line, but not quite. The vertical distance between the observed points and the expected straight line is the **residual error** (red lines in the plot).

```{r}
#| label: error
#| echo: false

set.seed(4321)
x <- 1:10
y <- (1 + 1.5 * x) + rnorm(10, 0, 2)

line <- tibble(
  x = x,
  y = y
)

m <- lm(y ~ x)
yhat <- m$fitted.values
diff <- y - yhat  
ggplot(line, aes(x, y)) +
  geom_segment(aes(x = x, xend = x, y = y, yend = yhat), colour = "red") +
  geom_point(size = 4) +
  geom_smooth(method = "lm", formula = y ~ x, se = FALSE) +
  scale_x_continuous(breaks = 1:10) +
  labs(title = bquote(italic(y) == beta[0] + beta[1] * italic(x) + epsilon))
```

The blue line in the plot is the expected line as estimated by a regression model (you'll learn how to run such model below), based on the $x$ and $y$ observations.

The formula of this regression model is the following:

$$
y = \beta_0 + \beta_1 * x + \epsilon
$$

where $\epsilon$ is the error. In other words, $y$ is the sum of $\beta_0$ and $\beta_1 * x$, plus some error.

Given that the error $\epsilon$ is assumed to come from a distribution defined as $Gaussian(0, \sigma)$, the formula can be rewritten by using a probability distribution (see (Introduction to regression models)[posts/intro-regression.qmd]).

$$
\begin{align}
y & \sim Gaussian(\mu, \sigma)\\
\mu & = \beta_0 + \beta_1 * x\\
\end{align}
$$

## Run a regression model

Let's get our hands dirty and model some data using a regression model.

First, let's attach the brms package.

```{r}
#| label: brms

library(brms)
```

We will analyse the duration of vowels in Italian.

### Vowel duration in Italian

Let's read the R data file `coretta2018a/ita_egg.rda`. It contains several phonetic measurements obtained from audio and electroglottographic recordings.

In this tutorial, we will model **vowel duration as a function of speech rate (i.e. number of syllables per second).**

The expectation is that vowels get shorter with increasing speech rate. You will notice how this is a very vague hypothesis: how shorter do they get? is the shortening the same across all speech rates, or does it get weaker with high speech rates? Our expectation/hypothesis simply states that vowels get shorter with increasing speech rate.

Maybe we could do better and use what we know from speech production and come up with something more precise, but these type of vague hypothesis are very common, if not standard, in language research, so we will stick to it for practical and pedagogical reasons.

Here's the data

```{r}
#| label: ita-egg

load("data/coretta2018a/ita_egg.rda")

ita_egg
```

Let's plot vowel duration and speech rate in a scatter plot.

```{r}
#| label: vow-rate

ita_egg |> 
  ggplot(aes(speech_rate, v1_duration)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "lm")
```

By glancing at the raw data, we see a negative relationship between speech rate and vowel duration: vowels get shorter with greater speech rate.

You might have noticed a warning about missing values. This is because some observations actually are missing (`NA`). Let's drop them from the tibble with `drop_na()`.

```{r}
#| label: ita-egg-clean
ita_egg_clean <- ita_egg |> 
  drop_na(v1_duration)
```

We will use `ita_egg_clean` for the rest of the tutorial.

### The model

$$
\begin{align}
\text{v1_duration} & \sim Gaussian(\mu, \sigma)\\
\mu & = \beta_0 + \beta_1 * \text{speech\_rate}\\
\end{align}
$$

Before that though, create a folder called `cache/` in the `data/` folder of the RStudio project of the course. We will use this folder to save the output of model fitting so that you don't have to refit the model every time. This is useful because as models get more and more complex, they can take quite a while to fit.

```{r}
#| label: vow-bm

vow_bm <- brm(
  v1_duration ~ speech_rate,
  family = gaussian,
  data = ita_egg_clean,
  cores = 4,
  seed = 20912,
  file = "data/cache/vow_bm"
)
```

The model will be fitted and saved in `data/cache/` with the file name `vow_bm.rds`. If you now re-run the same code again, you will notice that `brm()` does not fit the model again, but rather reads it from the file (no output is shown, but trust me, it works! Check the contents of `data/cache/` to see for yourself.).

::: callout-warning
When you save the model fit to a file, R does not keep track of changes in the model specification, so if you make changes to the formula or data, you need to **delete the saved model file** before re-running the code for the changes to have effect!
:::

## Interpret the model summary

To obtain a summary of the model, use the `summary()` function.

```{r}
#| label: vow-bm-summary

summary(vow_bm)
```

Let's focus on the "Regression Coefficients" table of the summary. To understand what they are, just remember the equation of line and the model formula above.

- `Intercept` is $\beta_0$: this is the mean vowel duration, **when speech rate is 0**.

- `speech_rate` is $\beta_1$: this is the change in vowel duration **for each unit increase of speech rate**.

This should make sense, if you understand the equation of a line: $y = \beta_0 + \beta_1 x$. If you are still uncertain, play around with the [web app](https://stefanocoretta.shinyapps.io/lines/).

Recall that the `Estimate` and `Est.Error` column are simply the **mean and standard deviation of the posterior probability distributions** of the estimate of `Intercept` and `speech_rate` respectively.

Looking at the 95% Credible Intervals (CrIs), we can say that based on the model and data:

- The mean vowel duration, when speech rate is 0 syl/s, is between 192 and 205 ms, at 95% confidence.

- We can be 95% confident that, for each unit increase of speech rate (i.e. for each increase of one syllable per second), the duration of the vowel decreases by 20.5-23 ms.

To see what the posterior probability densities of `\beta_0`, `\beta_1` and `\sigma` look like, you can quickly plot them with the `plot()` function.


```{r}
#| label: vow-bm-plot

plot(vow_bm)
```

If you prefer to see density plots instead of histograms, you can specify the `combo` argument.

```{r}
#| label: vow-bm-plot-2
plot(vow_bm, combo = c("dens", "trace"))
```


## Plot the model predictions

You should always also plot the model predictions, i.e. the predicted values of vowel duration based on the model predictors (here just `speech_rate`).

You will learn more advanced methods later on, but for now you can use `conditional_effects()` from the brms package.

```{r}
#| label: vow-bm-cond

conditional_effects(vow_bm, effects = "speech_rate")
```

If you wish to include the raw data in the plot, you can wrap `conditional_effects()` in `plot()` and specify `points = TRUE`. Any argument that needs to be passed to `geom_point()` (these are all ggplot2 plots!) can be specified in a list as the argument `point_args`. Here we are making the points transparent.

```{r}
#| label: vow-bm-cond-1

plot(conditional_effects(vow_bm, effects = "speech_rate"), points = TRUE, point_args = list(alpha = 0.1))
```

::: callout-note
#### Next

- [Introduction to regression models (Part III): include categorical predictors](intro-regression-categorical)
:::
