---
title: "Plotting basics"
author: "Stefano Coretta"
description: Learn the basics of plotting in R with ggplot2
date: 2024-06-27
editor: visual
format: 
  html:
    css: [webex.css]
    include-after-body: [webex.js]
execute: 
  warning: false
---

```{r}
#| label: setup
#| echo: false
#| message: false

library(tidyverse)
library(webexercises)
```

::: callout-warning
#### Prerequisites

-   [Introduction to plotting](intro-plot.qmd)
:::

## Plotting basics

Plotting data in R is easy once you understand the basics.

### Graphic systems

In R, you can create plots using different systems.

-   Base R.
-   lattice.
-   ggplot2.
-   more...

In this course you will learn how to use the ggplot2 system, but before we dive in, let's have a look at the base R plotting system too.

### Base R plotting function

Let's create two vectors, `x` and `y` and plot them.

```{r}
#| label: scatter

x <- 1:10
y <- x^3

plot(x, y)
```

Easy!

Now let's add a few more things.

```{r}
#| label: line

plot(x, y, type = "l", col = "purple", lwd = 3, lty = "dashed")
```

With plots as simple as this one, the base R plotting system is sufficient, but to create more complex plots (which is virtually always the case), base R gets incredibly complicated.

Instead we can use the tidyverse package [ggplot2](https://ggplot2.tidyverse.org). ggplot2 works well with the other tidyverse packages and it follows the same principles, so it is convenient to use it for data visualisation instead of base R!

## Your first ggplot2 plot

The tidyverse package [ggplot2](https://ggplot2.tidyverse.org) provides users with a consistent set of functions to create captivating graphics.

::: callout-warning
To be able to use the functions in a package, you first need to **attach the package**. We have already attached the `library(tidyverse)` packages, among which there is ggplot2, so you don't need to do anything else.
:::

We will first use the `polite` data to learn the basics of plotting using ggplot.

```{r}
#| label: read-data
#| message: false

library(tidyverse)

polite <- read_csv("data/winter2012/polite.csv")
```

In this tutorial we will use the following columns:

-   `f0mn`: mean f0 (fundamental frequency).

-   `H1H2`: difference between H2 and H1 (second and first harmonic). A higher H1-H2 difference indicates greater breathiness.

### A basic plot

These are the minimum constituents of a ggplot2 plot.

::: callout-tip
## ggplot basics

-   The `data`: you have to specify the data frame with the data you want to plot.

-   The `mapping`: the mapping tells ggplot how to map data columns to parts of the plot like the axes or groupings within the data. (For example, which variable is shown on the x axis, and which one is on the y axis? If data comes from two different groups, should each group get its own colour?) These different parts of the plot are called *aesthetics*, or `aes` for short.
:::

You can specify the data and mapping with the `data` and `mapping` arguments of the `ggplot()` function.

Note that the `mapping` argument is always specified with `aes()`: `mapping = aes(â€¦)`.

In the following bare plot, we are just mapping `f0mn` to the *x*-axis and `H1H2` to the *y*-axis, from the `polite` data frame.

**Create a new code chunk, copy the following code and run it.** From this point on I will assume you'll create a new code chunk and run the code yourself, without explicit instructions.

```{r}
#| label: bare-plot

ggplot(
  data = polite,
  mapping = aes(x = f0mn, y = H1H2)
)
```

Not much to see here: just two axes! So where's the data? Don't worry, we didn't do anything wrong. Showing the data itself requires a further step, which we'll turn to next.

::: callout-note
#### Quiz 2

```{r}
#| label: quiz-2
#| results: asis
#| echo: false

cat("Is the following code correct? Justify your answer.", torf(FALSE))

```

``` r
ggplot(
  data = polite,
  mapping = c(x = total_duration, y = articulation_rate)
)
```
:::

### Let's add geometries

Our code so far makes nice axes, but we are missing the most important part: showing the data!

Data is represented with **geometries**, or `geom`s for short. `geom`s are added to the base ggplot with functions whose names all start with `geom_`.

::: callout-tip
#### Geometries

**Geometries** are plot elements that show the data through geometric shapes.

Different geometries are added to a ggplot using one of the `geom_*()` functions.
:::

For this plot, you want to use `geom_point()`. This geom simply adds point to the plot based on the data in the `polite` data frame.

To add `geom`s to a plot, you write a `+` at the end of the `ggplot()` command and include the geom on the next line. For example:

```{r}
#| label: fig-first-plot
#| fig-cap: "Scatter plot of mean f0 and H1-H2 difference."

ggplot(
  data = polite,
  mapping = aes(x = f0mn, y = H1H2)
) +
  geom_point()
```

This type of plot, with two continuous axes and data represented by points, is called a **scatter plot**.

::: callout-tip
#### Scatter plot

A **scatter plot** is a plot with two numeric axes and points indicating the data. It is used when you want to show the relationship between two numeric variables.

To create a scatter plot, use the `geom_point()` geometry.
:::

When writing your results section, you could describe the plot this way:

> @fig-first-plot shows a scatter plot of mean f0 on the *x*-axis and H1-H2 difference on the *y*-axis. The plot suggest an overall negative relationship between mean f0 and H1-H2 difference. In other words, increasing mean f0 corresponds to decreasing breathiness.

::: callout-warning
Note that using the `+` is a quirk of `ggplot()`. The idea behind it is that you start from a bare plot and you **add** (`+`) layers of data on top of it. This is because of the philosophy behind the package, called the [Layered Grammar of Graphics](http://vita.had.co.nz/papers/layered-grammar.html). In fact, Grammar of Graphics is where you get the GG in ggplot!
:::

### Function arguments

Note that the `data` and `mapping` arguments don't have to be named explicitly (with `data =` and `mapping =`) in the `ggplot()` function, since they are obligatory and they are specified in that order.

```{r}
#| label: named-arguments
#| warning: false

ggplot(
  polite,
  aes(x = f0mn, y = H1H2)
) +
  geom_point()
```

In fact, you can also leave out `x =` and `y =`.

```{r}
#| label: named-arguments-2

ggplot(
  polite,
  aes(f0mn, H1H2)
) +
  geom_point()
```

Try running `?ggplot` in the Console to see the arguments of the function and the order they appear in.

::: callout-note
#### Quiz 3

```{r}
#| label: quiz-3
#| results: asis
#| echo: false

opts_3 <- c(
  "`ggplot(polite, aes(H1H2, f0mn)) + geom_point()`",
  answer = "`ggplot(polite, aes(y = H1H2, x = f0mn)) + geom_point()`",
  "`ggplot(polite, aes(y = f0mn, x = H1H2)) + geom_point()`"
)

cat("**Which of the following will produce the same plot as the one above?** Reason through it first without running the code, then run all of these to check whether they look the way you expected.", longmcq(opts_3))
```

::: {.callout-tip collapse="true"}
#### Hint

When specifying arguments, the order matters when not using the argument names.

So `aes(a, b)` is different from `aes(b, a)`.

But `aes(y = b, x = a)` is the same as `aes(a, b)`.
:::
:::

### What the pipe?!

The code of the latest plot can also be written this way.

```{r}
#| label: plot-pipe
#| eval: false

polite |>
  ggplot(aes(f0mn, H1H2)) +
    geom_point()
```

Wait, what is that thing, `|>`?

It's called a **pipe**. Think of a pipe as a teleporter.

The pipe `|>` teleports the data `polite` into the following function as the first argument. So `polite |> ggplot()` is equivalent to `ggplot(polite)`.

For now it might not make much sense using the pipe, but you will learn next week how to chain many functions one after the other using the pipe, at which point its usefulness will be more obvious.

As a sneak peek, you will be able to filter the data before plotting it, like so:

```{r}
#| label: filter-plot-pipe

polite |>
  # include only rows where f0mn < 300
  filter(f0mn < 300) |>
  ggplot(aes(f0mn, H1H2)) +
    geom_point()
```

## Changing aesthetics

### `colour` aesthetic

You might notice that there seems to be two subgroups within the data: one below about 200 Hz and one above about it.

In fact, these subgroups are related to `gender`. Let's colour the points by gender then.

You can use the `colour` aesthetic to colour the points by `gender`, like so:

```{r}
#| label: fig-polite-gender
#| fig-cap: "Scatter plot of mean f0 and H1-H2 difference, by gender."
#| warning: false

polite |>
  ggplot(aes(f0mn, H1H2, colour = gender)) +
  geom_point()
```

::: callout-tip
#### `colour` or `color`?

To make ggplot easy for users of different Englishes, it's possible to write the colour aesthetic either as the British-style `colour` or the American-style `color`! Both will get the job done.
:::

Notice how `colour = gender` must be inside the `aes()` function, because we are trying to map `colour` to the values of the column `gender`. Colours are automatically assigned to each level in `gender`.

The default colour palette is used, but you can customise it. You will learn later in the course how to create custom palettes, but you can quickly change palette using one of the `scale_colour_*()` functions.

A useful function is the `scale_colour_brewer()` function. This function creates palettes based on [ColorBrewer](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3) 2.0. There are three types of palettes (see the linked website for examples):

-   Sequential (`seq`): a gradient sequence of hues from lighter to darker.

-   Diverging (`div`): useful when you need a neutral middle colour and sequential colours on either side of the neutral colour.

-   Qualitative (`qual`): useful for categorical variables.

Let's use the default qualitative palette.

```{r}
#| label: fig-polite-gender-brewer
#| fig-cap: "Scatter plot of mean f0 and H1-H2 difference, by gender."
#| warning: false

polite |>
  ggplot(aes(f0mn, H1H2, colour = gender)) +
  geom_point() +
  scale_color_brewer(type = "qual")
```

Now try changing the `palette` argument of the `scale_colour_brewer()` function to different palettes. (Check the function documentation for a list).

Another set of palettes is provided by `scale_colour_viridis_d()` (the `d` stands for "discrete" palette, to be used for categorical variables). Here's an example.

```{r}
#| label: fig-polite-gender-viridis
#| fig-cap: "Scatter plot of mean f0 and H1-H2 difference, by gender."
#| warning: false

polite |>
  ggplot(aes(f0mn, H1H2, colour = gender)) +
  geom_point() +
  scale_color_viridis_d(option = "B")
```

::: {.callout-important collapse="true"}
#### Extra: The default colour palette

If you want to know more about the default colour palette, check this [blog post](https://www.statology.org/ggplot-default-colors/) out.
:::

### `alpha` aesthetic

Another useful ggplot2 aesthetic is `alpha`. This aesthetic sets the transparency of the geometry: `0` means completely transparent and `1` means completely opaque.

Change alpha in the code below to `0.5`.

```{r}
#| label: polite-gender-alpha-ex
#| fig-cap: "Scatter plot of mean f0 and H1-H2 difference, by gender."
#| eval: false

polite |>
  ggplot(aes(f0mn, H1H2, colour = gender)) +
  geom_point(alpha = ...) +
  scale_color_brewer(type = "qual")
```

When you are setting a value yourself that should apply to all instances of some geometry, rather than mapping an aesthetic to values in a specific column (like we did above with `colour`), you should add the aesthetic outside of `aes()` and usually in the geom function you want to modify.

Setting a lower alpha is useful when there are a lot of points or other geometries that overlap with each other and it just looks like a blob of colour (you can't really see the individual geometries; you will see an example next week). It is not the case here, and in fact reducing the alpha makes the plot quite illegible!

## Labels

If you want to change the labels of the axes and the legend, you can use the `labs()` function, like this.

```{r}
#| label: fig-polite-gender-labs
#| fig-cap: "Scatter plot of mean f0 and H1-H2 difference, by gender."
#| warning: false

polite |>
  ggplot(aes(f0mn, H1H2, colour = gender)) +
  geom_point() +
  labs(
    x = "Mean f0 (Hz)",
    y = "H1-H2 difference (dB)",
    colour = "Gender"
  )
```

Also add a `title` and a `subtitle` (use these two arguments within the `labs()` function).

::: {.callout-tip collapse="true"}
#### Hint

For example, `labs(title = "...", ...)`.
:::

## Summary

That's all for this week!

::: {.callout-note appearance="minimal"}
-   **ggplot2** is a plotting package from the tidyverse.

-   To create a basic plot, you use the `ggplot()` function and specify `data` and `mapping`.

    -   The `aes()` function allows you to specify aesthetics (like axes, colours, ...) in the `mapping` argument.

    -   Geometries map data values onto shapes in the plot. All geometry functions are of the type `geom_*()`.

-   **Scatter plots** are created with `geom_point()` and can be used with two numeric variables.
:::

::: callout-note
## Next

-   [Bar charts](bar-charts.qmd)
:::
