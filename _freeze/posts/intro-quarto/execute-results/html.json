{
  "hash": "91f37f0018dd2c2808f1aa4c5896169d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to Quarto\"\ndescription: \"Learn how to write dynamic documents with both text and code using Quarto\"\nauthor: \"Stefano Coretta\"\ndate: 2024-06-27\neditor: visual\nformat: \n  html:\n    css: [webex.css]\n    include-after-body: [webex.js]\nexecute: \n  warning: false\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n::: callout-warning\n## Prerequisites\n\n-   [R scripts](scripts.qmd)\n:::\n\n## Quarto\n\nKeeping track of the code you use for data analysis is a very important aspect of research project managing: not only the code is there if you need to rerun it later, but it allows your data analysis to be **reproducible** (i.e., it can be reproduced by you or other people in such a way that starting with the same data and code you get to the same results).\n\n::: callout-tip\n### Reproducible research\n\nResearch is **reproducible** when the same data and same code return the same results.\n\nSee the [Definitions](https://the-turing-way.netlify.app/reproducible-research/overview/overview-definitions) page of The Turing Way for definitions of *reproducible*, *replicable*, *robust* and *generalisable* research.\n:::\n\nR scripts are great for writing code, and you can even document the code (add explanations or notes) with comments (i.e. lines that start with `#`).\n\nBut for longer text or complex data analysis reports, R scripts can be a bit cumbersome.\n\nA solution to this is using Quarto files (they have the `.qmd` extension).\n\n::: callout-note\n#### Quiz 1\n\n\n\n\n**When is research not reproducible?** <div class='webex-radiogroup' id='radio_GPPGTNLUOI'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_GPPGTNLUOI\" value=\"\"></input> <span>a. When the results do not match the researcher&apos;s expectations.</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_GPPGTNLUOI\" value=\"answer\"></input> <span>b. When the the same data and code as in the original study do not produce the published results.</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_GPPGTNLUOI\" value=\"\"></input> <span>c. When research conducted by a different research team with new data does not produce the results as published in the original study. </span></label></div>\n\n\n\n\n::: {.callout-tip collapse=\"true\"}\n#### Hint\n\nResearch is **reproducible** when you can produce the same results using the original data and code/methods.\n\nResearch is **replicable** when you can produce the same results using new data and the original code/methods.\n\nSee <https://the-turing-way.netlify.app/reproducible-research/overview/overview-definitions.html#table-of-definitions-for-reproducibility>.\n:::\n:::\n\n### Code... and text!\n\nQuarto is a file format that allows you to mix code and formatted text in the same file.\n\nThis means that you can write **dynamic reports** using Quarto files: dynamic reports are just like analysis reports (i.e. they include formatted text, plots, tables, code output, code, etc...) but they are **dynamic** in the sense that if, for example, data or code changes, you can just rerun the report file and all code output (plots, tables, etc...) is updated accordingly!\n\n::: callout-tip\n#### Dynamic reports in Quarto\n\n**Quarto** is a file type with extension `.qmd` in which you can write formatted text and code together.\n\nQuarto can be used to generate **dynamic reports**: these are files that are generated automatically from the file source, ensuring data and results in the report are always up to date.\n:::\n\n### Formatting text\n\nR comments in R scripts cannot be formatted (for example, you can't make text bold or italic).\n\nText in Quarto files can be fully formatted using a simple but powerful **mark-up language** called [markdown](https://www.markdownguide.org).\n\nYou don't have to learn markdown all in one go, so I encourage you to just learn it bit by bit, at your pace. You can look at the the [Markdown Guide](https://www.markdownguide.org/getting-started/) for an in-depth intro and/or dive in the [Markdown Tutorial](https://www.markdowntutorial.com) for a hands-on approach.\n\nA few quick pointers (you can test them in the [Markdown Live Preview](https://markdownlivepreview.com)):\n\n-   Text can be made italics by enclosing it between single stars: `*this text is in italics*`.\n\n-   You can make text bold with two stars: `**this text is bold!**`.\n\n-   Headings are created with `#`:\n\n``` md\n# This is a level-1 heading\n\n## This is a level-2 heading\n```\n\n::: callout-tip\n#### Mark-up, Markdown\n\nA **mark-up language** is a text-formatting system consisting of symbols or keywords that control the structure, formatting or relationships of textual elements. The most common mark-up languages are HTML, XML and TeX.\n\n**Markdown** is a simple yet powerful mark-up language.\n:::\n\n### Create a `.qmd` file\n\n::: callout-warning\n#### Important\n\nWhen working through these tutorials, always **make sure you are in the course Quarto Project** you created before.\n\nYou know you are in a Quarto Project because you can see the name of the Project in the top-right corner of RStudio, next to the light-blue cube icon.\n\nIf you see `Project (none)` in the top-right corner, that means **you are not** in the Quarto Project.\n\nTo make sure you are in the Quarto project, you can open the project by going to the project folder in File Explorer (Windows) or Finder (macOS) and double click on the `.Rproj` file.\n:::\n\nTo create a new `.qmd` file, just click on the `New file` button (the white square with the green plus symbol), then `Quarto Document...`. (If you are asked to install/update packages, do so.)\n\n![](/img/new-quarto.png){fig-align=\"center\" width=\"400\"}\n\nA window will open. Add a title of your choice and your name. Make sure the `Use visual markdown editor` is **NOT ticked**, then click `Create` (you will be free to use the visual editor later, but it is important that you first see what a Quarto document looks like under the hood first).\n\n![](/img/new-quarto-window.png){fig-align=\"center\" width=\"500\"}\n\nA new `.qmd` file will be created and will open in the File Editor panel in RStudio.\n\n**Note** that creating a Quarto file does not automatically save it on your computer. To do so, either use the keyboard short-cut `CMD+S`/`CTRL+S` or click on the floppy disk icon in the menu below the file tab.\n\n![](/img/save-quarto.png){fig-align=\"center\" width=\"500\"}\n\nSave the file inside the `code/` folder with the following name: `tutorial-w04.qmd`.\n\nRemember that all the files of your RStudio project don't live inside RStudio but on your computer.\n\n### Parts of a Quarto file\n\nA Quarto file usually has three main parts:\n\n-   The YAML header (green in the screenshot below).\n\n-   Code chunks (red).\n\n-   Text (blue).\n\n![](/img/quarto-parts.png){fig-align=\"center\" width=\"500\"}\n\nEach Quarto file has to start with a YAML header, but you can include as many code chunks and as much text as you wish, in any order.\n\n::: callout-tip\n#### Quarto: YAML header\n\nThe **header** of a `.qmd` file contains a list of `key: value` pairs, used to specify settings or document info like the `title` and `author`.\n\nYAML headers start and end with three dashes `---`.\n:::\n\n::: callout-tip\n#### Quarto: Code chunks\n\n**Code chunks** start and end with three back-ticks ```` ``` ```` and they contain code.\n\n`{r}` indicates that the code is R code. Settings can be specified inside the chunk with the `#|` prefix: for example `#| label: setup` sets the name of the chunk (the label) to `setup`.\n:::\n\n### Working directory\n\nWhen using Quarto projects, the working directory (the directory all relative paths are relative to) is the project folder.\n\nHowever, when running code from a Quarto file, the code is run as if the working directory were the folder in which the file is saved.\n\nThis isn't an issue if the Quarto file is directly in the project folder, but in our case our Quarto files live in the `code/` folder within the project folder (and it is good practice to do so!).\n\nWe can instruct R to *always* run code from the project folder (i.e. the working directory is the project folder). This is when the `_quarto.yml` file comes into play.\n\nOpen the `_quarto.yml` file in RStudio (you can simply click on the file in the `Files` tab and that will open the file in the RStudio editor). Add the line `execute-dir: project` under the title. Note that indentation should be respected, so the line you write should align with `title:`, not with `project:`.\n\n``` yaml\nproject:\n  title: \"dal\"\n  execute-dir: project\n```\n\nNow, all code in Quarto files, no matter where they are saved, will be run with the project folder as the working directory.\n\n### How to add and run code\n\nYou will use the Quarto document you created to write text and code for this tutorial.\n\n**Delete everything in the Quarto document below the YAML header.** It's just example textâ€”we're not attached to it!\n\nThis is what the Quarto document should look like now (if your YAML header also contains \"`format:html`, that's completely fine):\n\n![](/img/quarto-empty.png){fig-align=\"center\" width=\"500\"}\n\nNow add an empty line and in the following line write a second-level heading `## Attach packages`, followed by two empty lines. Like so:\n\n![](/img/quarto-heading.png){fig-align=\"center\" width=\"500\"}\n\nNow we can insert a code chunk to add the code to attach the tidyverse. To insert a new code chunk, you can click on the `Insert a new code chunk` button (the little green square icon with a `C` and a plus) , or you can press `OPT+CMD+I/ALT+CTRL+I`.\n\n![](/img/quarto-insert-chunk.png){fig-align=\"center\" width=\"500\"}\n\nA new R code chunk will be inserted at the text cursor position.\n\nNow go ahead and add the following lines of code *inside* the R code chunk.\n\n``` r\n#| label: setup\n\nlibrary(tidyverse)\n```\n\n::: callout-note\n#### Running code in Quarto documents\n\nTo run the code, you have two options:\n\n-   You click the small green triangle in the top-right corner of the chunk. This runs all the code in the code chunk.\n\n-   Ensure the text cursor is inside the code chunk and press `SHIFT+CMD+ENTER/SHIFT+CTRL+ENTER`. This too runs all the code in the code chunk.\n\nIf you want to run line by line in the code chunk, you can place the text cursor on the line you want to run and press `CMD+ENTER/CTRL+ENTER`. The current line is run and the text cursor is moved to the next line. Just like in the .R scripts that we've been using in past weeks.\n:::\n\nRun the `setup` chunk now.\n\n![](/img/quarto-run-chunk.png){fig-align=\"center\" width=\"500\"}\n\nYou will see messages printed below the code chunk, in your Quarto file (don't worry about the `Conflicts`, they just tell you that some functions from the tidyverse packages have replaced the base R functions, which is OK).\n\n::: callout-note\n#### Practice 1\n\nTry this yourself:\n\n-   Create a new second-level heading (with `##`) called `Read data`.\n\n-   Create a new R code chunk.\n\n-   Set the label of the chunk to `read-data`.\n\n-   Add code to read the following files (hint: think about where these files are located relative to the working directory, that is, the project folder). Assign the datasets to the variable names `polite` and `glot_status` respectively.\n\n    -   `winter2012/polite.csv`\n\n    -   `coretta2022/glot_status.rds`\n\n-   Run the code.\n:::\n\n### Render Quarto files to HTML\n\nYou can render a `.qmd` file into a nicely formatted HTML file.\n\nTo render a Quarto file, just click on the `Render` button and an HTML file will be created and saved in the same location of the Quarto file.\n\n![](/img/quarto-render.png){fig-align=\"center\" width=\"400\"}\n\nIt may be shown in the Viewer pane (like in the picture below) or in a new browser window. There are a few ways you can set this option to whichever version you prefer. Follow the instructions that work for youâ€”they all do the same thing.\n\n-   `Tools > Global Options > R Markdown > Show output preview inâ€¦`\n-   `Preferences > R Markdown > Basics > Show output preview inâ€¦`.\n-   Right beside the `Render` button, you will see a little white gear. Click on that gear, and a drop-down menu will open. Click on `Preview in Window` or `Preview in Viewer Pane`, whichever you prefer.\n\n![](/img/quarto-render-view.png){fig-align=\"center\" width=\"700\"}\n\nRendering Quarto files is not restricted to HTML, but also PDFs and even Word documents!\n\nThis is very handy when you are writing an analysis report you need to share with others.\n\n::: callout-tip\n#### Quarto: Rendering\n\nQuarto files can be **rendered** into other formats, like HTML, PDF and Word documents.\n:::\n\nThe assessments of this course will require you to write text and code in a Quarto file and render it to HTML.\n\nYou could even write your dissertation in Quarto!\n\nThe following sections will introduce you to the basics of plotting data. You will keep learning how to create plots throughout the course.\n\n## Render your Quarto file!\n\nNow that you have done all of this hard work, why don't you try and render the Quarto file you've been working on to an HTML file?\n\nGo ahead, click on the \"Render\" button and if everything works fine you should see a rendered HTML file in a second!\n\nNote that you will be asked to render your Quarto files for the assessments, so I recommend you try this out now.\n\n## Summary\n\nThat's all for this week!\n\n::: {.callout-note appearance=\"minimal\"}\n-   **Quarto** files can be used to create dynamic and reproducible reports.\n\n-   **Mark-up languages** are text-formatting systems that specify text formatting and structure using symbols or keywords. Markdown is the mark-up language that is used in Quarto documents.\n\n-   The main parts of a `.qmd` file are the YAML header, text and code chunks.\n:::\n\n::: callout-note\n## Next\n\n-   [Statistical variables](stat-variables.qmd)\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}