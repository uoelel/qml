{
  "hash": "b09b743df5b5c1a282ac9165a61ba813",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Statistical summaries\"\nauthor: \"Stefano Coretta\"\ndescription: \"Learn about descriptive summary measures\"\ndate: 2023-09-13\nformat: \n  html:\n    css: [webex.css]\n    include-after-body: [webex.js]\n---\n\n\n\n\n\n::: callout-warning\n#### Pre-requisites\n\n-   [R basics](r-basics.qmd)\n:::\n\n## Summary measures: overview\n\n![](../img/data-summ.png){fig-align=\"center\" width=\"500\"}\n\nWe can summarise variables using **summary measures**. There are two types of summary measures.\n\n-   **Measures of central tendency** indicate the **typical or central value** of a sample.\n\n-   **Measures of dispersion** indicate the **spread or dispersion** of the sample values around the central tendency value.\n\n**Always report a measure of central tendency together with its measure of dispersion!**\n\n::: callout-note\n#### Measures of central tendency\n\n**Mean**\n\n$$\\bar{x} = \\frac{\\sum_{i=1}^{n} x_i}{n} = \\frac{x_1 + ... + x_n}{n}$$\n\n**Median**\n\n$$\\text{if } n \\text{ is odd, } x_\\frac{n+1}{2}$$\n\n$$\\text{if } n \\text{ is even,  } \\frac{x_\\frac{n}{2} + x_\\frac{n}{2}}{2}$$\n\n**Mode**\n\nThe most common value.\n:::\n\n::: callout-note\n#### Measures of dispersion\n\n**Minimum and maximum** values\n\n**Range**\n\n$$ max(x) - min(x)$$\n\nThe difference between the largest and smallest value.\n\n**Standard deviation**\n\n$$\\text{SD} = \\sqrt{\\frac{\\sum_{i=1}^n (x_i - \\bar{x})^2}{n-1}} = \\sqrt{\\frac{(x_1 - \\bar{x})^2 + ... + (x_n - \\bar{x})^2}{n-1}}$$\n:::\n\n## Mean\n\nUse the mean with **numeric continuous variables**, if:\n\n-   The variable can take on any positive and negative number, including 0.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(c(-1.12, 0.95, 0.41, -2.1, 0.09))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.354\n```\n\n\n:::\n:::\n\n\n\n-   The variable can take on any positive number only.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(c(0.32, 2.58, 1.5, 0.12, 1.09))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.122\n```\n\n\n:::\n:::\n\n\n\n::: callout-warning\n**Don't take the mean of proportions and percentages!**\n\nBetter to calculate the proportion/percentage across the entire data, rather than take the mean of individual proportions/percentages: see [this blog post](https://www.robertoreif.com/blog/2018/1/7/why-you-should-be-careful-when-averaging-percentages). If you really really have to, use the *median*.\n:::\n\n## Median\n\nUse the median with **numeric (continuous and discrete) variables**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# even N\nmedian(c(-1.12, 0.95, 0.41, -2.1, 0.09))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.09\n```\n\n\n:::\n\n```{.r .cell-code}\n# odd N\nodd <- c(4, 6, 3, 9, 7, 15)\nmedian(odd)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6.5\n```\n\n\n:::\n\n```{.r .cell-code}\n# the median is the mean of the two \"central\" number\nsort(odd)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  3  4  6  7  9 15\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(c(6, 7))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6.5\n```\n\n\n:::\n:::\n\n\n\n::: callout-warning\n-   **The mean is very sensitive to outliers.**\n\n-   The median is **not**.\n\nThe following list of numbers does not have obvious outliers. The mean and median are not to different.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# no outliers\nmedian(c(4, 6, 3, 9, 7, 15))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6.5\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(c(4, 6, 3, 9, 7, 15))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7.333333\n```\n\n\n:::\n:::\n\n\n\nIn the following case, there is quite a clear outlier, `40`. Look how the mean is higher than the median. This is because the outlier `40` pulls the mean towards it.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# one outlier\nmedian(c(4, 6, 3, 9, 7, 40))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6.5\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(c(4, 6, 3, 9, 7, 40))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 11.5\n```\n\n\n:::\n:::\n\n\n:::\n\n## Mode\n\nUse the mode with **categorical (discrete) variables**. Unfortunately the `mode()` function in R is not the *statistical* mode, but rather it returns the R object type.\n\nYou can use the `table()` function to \"table\" out the number of occurrences of elements in a vector.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(c(\"red\", \"red\", \"blue\", \"yellow\", \"blue\", \"green\", \"red\", \"yellow\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n  blue  green    red yellow \n     2      1      3      2 \n```\n\n\n:::\n:::\n\n\n\nThe mode is the most frequent value: here it is `red`, with 3 occurrences.\n\n::: callout-warning\n**Likert scales are ordinal (categorical) variables, so the mean and median are not appropriate!**\n\nYou should use the mode (You can use the median with Likert scales if you really really need to...)\n:::\n\n\n## Minimum and maximum\n\nYou can report minimum and maximum values for any **numeric variable**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx_1 <- c(-1.12, 0.95, 0.41, -2.1, 0.09)\n\nmin(x_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -2.1\n```\n\n\n:::\n\n```{.r .cell-code}\nmax(x_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.95\n```\n\n\n:::\n\n```{.r .cell-code}\nrange(x_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -2.10  0.95\n```\n\n\n:::\n:::\n\n\n\nNote that the `range()` function does not return the statistical range (see next section), but simply prints both the minimum and the maximum.\n\n## Range\n\nUse the range with any **numeric variable**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx_1 <- c(-1.12, 0.95, 0.41, -2.1, 0.09)\nmax(x_1) - min(x_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.05\n```\n\n\n:::\n\n```{.r .cell-code}\nx_2 <- c(0.32, 2.58, 1.5, 0.12, 1.09)\nmax(x_2) - min(x_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.46\n```\n\n\n:::\n\n```{.r .cell-code}\nx_3 <- c(4, 6, 3, 9, 7, 15)\nmax(x_3) - min(x_3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12\n```\n\n\n:::\n:::\n\n\n\n## Standard deviation\n\nUse the standard deviation with **numeric continuous variables**, if:\n\n-   The variable can take on any positive and negative number, including 0.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsd(c(-1.12, 0.95, 0.41, -2.1, 0.09))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.23658\n```\n\n\n:::\n:::\n\n\n\n-   The variable can take on any positive number only.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsd(c(0.32, 2.58, 1.5, 0.12, 1.09))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9895555\n```\n\n\n:::\n:::\n\n\n\n::: callout-warning\nStandard deviations are **relative** and depend on the measurement **unit/scale!**\n\n**Don't use the standard deviation with proportions and percentages!**\n:::\n\n## Summarise data in R\n\nWhen you work with data, you always want to get summary measures for most of the variables in the data.\n\nData reports usually include summary measures. It is also important to understand which summary measure is appropriate for which type of variable.\n\nWe have covered this in the lecture, so we won't go over it again here. Instead, you will learn how to obtain summary measures using the `summarise()` function from the [dplyr](https://dplyr.tidyverse.org) tidyverse package.\n\n`summarise()` takes at least two arguments:\n\n-   The data frame to summarise.\n\n-   One or more summary functions.\n\nFor example, let's get the mean the reaction time column `RT`. Easy! (First attach the tidyverse and read the `song2020/shallow.csv` file into a variable called `shallow`.)\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarise(shallow, RT_mean = mean(RT))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"RT_mean\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"867.3592\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\nGreat! The mean reaction times of the entire sample is 867.3592 ms.\n\nYou can round numbers with the `round()` function. For example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum <- 867.3592\nround(num)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 867\n```\n\n\n:::\n\n```{.r .cell-code}\nround(num, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 867.4\n```\n\n\n:::\n\n```{.r .cell-code}\nround(num, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 867.36\n```\n\n\n:::\n:::\n\n\n\nThe second argument sets the number of decimals to round to (by default, it is `0`, so the number is rounded to the nearest integer, that is, to the nearest whole number with no decimal values).\n\nLet's recalculate the mean by rounding it this time.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarise(shallow, RT_mean = round(mean(RT)))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"RT_mean\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"867\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\nWhat if we want also the standard deviation? Easy: we use the `sd()` function. (Round the mean and SD with the `round()` function in your code).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# round the mean and SD\nsummarise(shallow, RT_mean = mean(RT), RT_sd = sd(RT))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"RT_mean\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"RT_sd\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"867.3592\",\"2\":\"292.9682\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\nNow we know that reaction times are on average 867 ms long and have a standard deviation of about 293 ms (rounded to the nearest integer).\n\nLet's go all the way and also get the minimum and maximum RT values with the `min()` and `max()` functions (round all the summary measures).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarise(\n  shallow,\n  RT_mean = mean(RT), RT_sd = sd(RT),\n  RT_min = ..., RT_max = ...\n)\n```\n:::\n\n\n\nFab! When writing a data report, you could write something like this.\n\n> Reaction times are on average 867 ms long (SD = 293 ms), with values ranging from 0 to 1994 ms.\n\nWe won't go into the details of what standard deviations are, but you can just think of them as a relative measure of how dispersed the data are around the mean: the higher the SD, the greater the dispersion around the mean, i.e. the greater the variability in the data.\n\nWhen required, you can use the `median()` function to calculate the median, instead of the `mean()`. Go ahead and calculate the median reaction times in the data. Is it similar to the mean?\n\n### `NA`s\n\nMost base R functions behave unexpectedly if the vector they are used on contain `NA` values.\n\n`NA` is a special object in R, that indicates that a value is **N**ot **A**vailable, meaning that that observation does not have a value.\n\nFor example, in the following numeric vector, there are 5 objects:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- c(3, 5, 3, NA, 4)\n```\n:::\n\n\n\nFour are numbers and one is `NA`.\n\nIf you calculate the mean of `a` with `mean()` something strange happens.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n:::\n\n\n\nThe functions returns `NA`.\n\nThis is because by default when just one value in the vector is `NA` then operations on the vector will return `NA`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n\n```{.r .cell-code}\nsum(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n\n```{.r .cell-code}\nsd(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n:::\n\n\n\nIf you want to discard the `NA` values when operating on a vector that contains them, you have to set the `na.rm` (for \"`NA` remove\") argument to `TRUE`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(a, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.75\n```\n\n\n:::\n\n```{.r .cell-code}\nsum(a, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15\n```\n\n\n:::\n\n```{.r .cell-code}\nsd(a, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9574271\n```\n\n\n:::\n:::\n\n\n\n::: callout-note\n#### Quiz 1\n\n\n\na. What does the `na.rm` argument of `mean()` do? <div class='webex-radiogroup' id='radio_BLJPBUDESQ'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_BLJPBUDESQ\" value=\"\"></input> <span>It changes `NA`s to `FALSE`.</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_BLJPBUDESQ\" value=\"\"></input> <span>It converts `NA`s to `0`s.</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_BLJPBUDESQ\" value=\"answer\"></input> <span>It removes `NA`s before taking the mean.</span></label></div>\nb. Which is the mean of `c(4, 23, NA, 5)` when `na.rm` has the default value? <div class='webex-radiogroup' id='radio_ANCVGJFXAA'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_ANCVGJFXAA\" value=\"answer\"></input> <span>`NA`.</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_ANCVGJFXAA\" value=\"\"></input> <span>`0`.</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_ANCVGJFXAA\" value=\"\"></input> <span>`10.66`.</span></label></div>\n\n\n\n::: {.callout-tip collapse=\"true\"}\n#### Hint\n\nCheck the documentation of `?mean`.\n:::\n:::\n\n::: callout-note\n#### Summary table of summary measures\n\n![](../img/measures-overview.png)\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}