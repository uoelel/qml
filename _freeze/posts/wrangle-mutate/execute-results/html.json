{
  "hash": "28455d7c895dc6dd5d3b6b9724a46a09",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Mutate data\"\ndescription: \"Learn about mutating data using the tidyverse\"\neditor: visual\nauthor: \"Stefano Coretta\"\nformat: \n  html:\n    css: [webex.css]\n    include-after-body: [webex.js]\ndate: 2024-07-15\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n## Mutate\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nglot_status <- readRDS(\"data/coretta2022/glot_status.rds\")\n```\n:::\n\n\n\n\nTo change existing columns or create new columns, we can use the `mutate()` function from the [dplyr](https://dplyr.tidyverse.org) package.\n\nTo learn how to use `mutate()`, we will re-create the `status` column (let's call it `Status` this time) from the `Code_ID` column in `glot_status`.\n\nThe `Code_ID` column contains the status of each language in the form `aes-STATUS` where `STATUS` is one of `not_endangered`, `threatened`, `shifting`, `moribund`, `nearly_extinct` and `extinct`.\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"aes-shifting\"       \"aes-extinct\"        \"aes-moribund\"      \n[4] \"aes-nearly_extinct\" \"aes-threatened\"     \"aes-not_endangered\"\n```\n\n\n:::\n:::\n\n\n\n\nWe want to create a new column called `Status` which has only the `STATUS` label (without the `aes-` part). To remove `aes-` from the `Code_ID` column we can use the `str_remove()` function from the [stringr](https://stringr.tidyverse.org) package. Check the documentation of `?str_remove` to learn which arguments it uses.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglot_status <- glot_status |>\n  mutate(\n    Status = str_remove(Code_ID, \"aes-\")\n  )\n```\n:::\n\n\n\n\nIf you check `glot_status` now you will find that a new column, `Status`, has been added. This column is a character column (`chr`).\n\nLet's reproduce the bar chart from above but with all the data from `glot_status`, using now the `Status` column.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglot_status |>\n  ggplot(aes(x = Status)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![Number of languages by endangerment status (repeated).](wrangle-mutate_files/figure-html/fig-status-bar-2-1.png){#fig-status-bar-2 width=672}\n:::\n:::\n\n\n\n\nBut something is not quite right... The order of the levels of `Status` does not match the order that makes sense (from least to most endangered)! Why?\n\nThis is because `status` (the pre-existing column) is a **factor** column, rather than a simple character column. What is a factor vector/column?\n\n::: callout-tip\n#### Factor vector\n\nA **factor vector** (or column) is a vector that contains a list of values (called *levels*) from a closed set.\n\nThe levels of a factor are ordered alphabetically by default.\n:::\n\nA vector/column can be mutated into a factor column with the `as.factor()` function. In the following code, we change the existing column `Status`, in other words we overwrite it (this happens automatically, because the `Status` column already exists, so it is replaced).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglot_status <- glot_status |>\n  mutate(\n    Status = as.factor(Status)\n  )\n\n# read below for an explanation of the dollar disgn $ syntax\nlevels(glot_status$Status)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"extinct\"        \"moribund\"       \"nearly_extinct\" \"not_endangered\"\n[5] \"shifting\"       \"threatened\"    \n```\n\n\n:::\n:::\n\n\n\n\nThe `levels()` functions returns the levels of a factor column in the order they are stored in the factor: by default the order is alphabetical. But wait, what is that `$` in `glot_status$Status`?\n\nThe dollar sign `$` a base R way of extracting a single column (in this case `Status`) from a data frame (`glot_status`).\n\n::: callout-tip\n#### The dollar sign \\`\\$\\`\n\nYou can use the dollar sign `$` to extract a single column from a data frame as a vector.\n:::\n\nWhat if we want the levels of `Status` to be ordered in a more logical manner: `not_endangered`, `threatened`, `shifting`, `moribund`, `nearly_extinct` and `extinct`? Easy! We can use the `factor()` function instead of `as.factor()` and specify the levels and their order.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglot_status <- glot_status |>\n  mutate(\n    Status = factor(Status, levels = c(\"not_endangered\", \"threatened\", \"shifting\", \"moribund\", \"nearly_extinct\", \"extinct\"))\n  )\n\nlevels(glot_status$Status)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"not_endangered\" \"threatened\"     \"shifting\"       \"moribund\"      \n[5] \"nearly_extinct\" \"extinct\"       \n```\n\n\n:::\n:::\n\n\n\n\nYou see that now the order of the levels returned by `levels()` is the one we specified.\n\nTransforming character columns to vector columns is helpful to specify a particular order of the levels which can then be used when plotting.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglot_status |>\n  ggplot(aes(x = Status)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![Number of languages by endangerment status (repeated).](wrangle-mutate_files/figure-html/fig-status-bar-3-1.png){#fig-status-bar-3 width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}