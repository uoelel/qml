{
  "hash": "3ea06e6c47f054719aa9ef42f7911dba",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Plotting basics\"\nauthor: \"Stefano Coretta\"\ndescription: Learn the basics of plotting in R with ggplot2\ndate: 2024-06-27\neditor: visual\nformat: \n  html:\n    css: [webex.css]\n    include-after-body: [webex.js]\nexecute: \n  warning: false\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n::: callout-warning\n#### Prerequisites\n\n-   [Introduction to plotting](intro-plot.qmd)\n:::\n\n## Plotting basics\n\nPlotting data in R is easy once you understand the basics.\n\n### Graphic systems\n\nIn R, you can create plots using different systems.\n\n-   Base R.\n-   lattice.\n-   ggplot2.\n-   more...\n\nIn this course you will learn how to use the ggplot2 system, but before we dive in, let's have a look at the base R plotting system too.\n\n### Base R plotting function\n\nLet's create two vectors, `x` and `y` and plot them.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:10\ny <- x^3\n\nplot(x, y)\n```\n\n::: {.cell-output-display}\n![](plotting-basics_files/figure-html/scatter-1.png){width=672}\n:::\n:::\n\n\n\n\nEasy!\n\nNow let's add a few more things.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(x, y, type = \"l\", col = \"purple\", lwd = 3, lty = \"dashed\")\n```\n\n::: {.cell-output-display}\n![](plotting-basics_files/figure-html/line-1.png){width=672}\n:::\n:::\n\n\n\n\nWith plots as simple as this one, the base R plotting system is sufficient, but to create more complex plots (which is virtually always the case), base R gets incredibly complicated.\n\nInstead we can use the tidyverse package [ggplot2](https://ggplot2.tidyverse.org). ggplot2 works well with the other tidyverse packages and it follows the same principles, so it is convenient to use it for data visualisation instead of base R!\n\n## Your first ggplot2 plot\n\nThe tidyverse package [ggplot2](https://ggplot2.tidyverse.org) provides users with a consistent set of functions to create captivating graphics.\n\n::: callout-warning\nTo be able to use the functions in a package, you first need to **attach the package**. We have already attached the `library(tidyverse)` packages, among which there is ggplot2, so you don't need to do anything else.\n:::\n\nWe will first use the `polite` data to learn the basics of plotting using ggplot.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\npolite <- read_csv(\"data/winter2012/polite.csv\")\n```\n:::\n\n\n\n\nIn this tutorial we will use the following columns:\n\n-   `f0mn`: mean f0 (fundamental frequency).\n\n-   `H1H2`: difference between H2 and H1 (second and first harmonic). A higher H1-H2 difference indicates greater breathiness.\n\n### A basic plot\n\nThese are the minimum constituents of a ggplot2 plot.\n\n::: callout-tip\n## ggplot basics\n\n-   The `data`: you have to specify the data frame with the data you want to plot.\n\n-   The `mapping`: the mapping tells ggplot how to map data columns to parts of the plot like the axes or groupings within the data. (For example, which variable is shown on the x axis, and which one is on the y axis? If data comes from two different groups, should each group get its own colour?) These different parts of the plot are called *aesthetics*, or `aes` for short.\n:::\n\nYou can specify the data and mapping with the `data` and `mapping` arguments of the `ggplot()` function.\n\nNote that the `mapping` argument is always specified with `aes()`: `mapping = aes(â€¦)`.\n\nIn the following bare plot, we are just mapping `f0mn` to the *x*-axis and `H1H2` to the *y*-axis, from the `polite` data frame.\n\n**Create a new code chunk, copy the following code and run it.** From this point on I will assume you'll create a new code chunk and run the code yourself, without explicit instructions.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data = polite,\n  mapping = aes(x = f0mn, y = H1H2)\n)\n```\n\n::: {.cell-output-display}\n![](plotting-basics_files/figure-html/bare-plot-1.png){width=672}\n:::\n:::\n\n\n\n\nNot much to see here: just two axes! So where's the data? Don't worry, we didn't do anything wrong. Showing the data itself requires a further step, which we'll turn to next.\n\n::: callout-note\n#### Quiz 2\n\n\n\n\nIs the following code correct? Justify your answer. <select class='webex-select'><option value='blank'></option><option value=''>TRUE</option><option value='answer'>FALSE</option></select>\n\n\n\n\n``` r\nggplot(\n  data = polite,\n  mapping = c(x = total_duration, y = articulation_rate)\n)\n```\n:::\n\n### Let's add geometries\n\nOur code so far makes nice axes, but we are missing the most important part: showing the data!\n\nData is represented with **geometries**, or `geom`s for short. `geom`s are added to the base ggplot with functions whose names all start with `geom_`.\n\n::: callout-tip\n#### Geometries\n\n**Geometries** are plot elements that show the data through geometric shapes.\n\nDifferent geometries are added to a ggplot using one of the `geom_*()` functions.\n:::\n\nFor this plot, you want to use `geom_point()`. This geom simply adds point to the plot based on the data in the `polite` data frame.\n\nTo add `geom`s to a plot, you write a `+` at the end of the `ggplot()` command and include the geom on the next line. For example:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data = polite,\n  mapping = aes(x = f0mn, y = H1H2)\n) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![Scatter plot of mean f0 and H1-H2 difference.](plotting-basics_files/figure-html/fig-first-plot-1.png){#fig-first-plot width=672}\n:::\n:::\n\n\n\n\nThis type of plot, with two continuous axes and data represented by points, is called a **scatter plot**.\n\n::: callout-tip\n#### Scatter plot\n\nA **scatter plot** is a plot with two numeric axes and points indicating the data. It is used when you want to show the relationship between two numeric variables.\n\nTo create a scatter plot, use the `geom_point()` geometry.\n:::\n\nWhen writing your results section, you could describe the plot this way:\n\n> @fig-first-plot shows a scatter plot of mean f0 on the *x*-axis and H1-H2 difference on the *y*-axis. The plot suggest an overall negative relationship between mean f0 and H1-H2 difference. In other words, increasing mean f0 corresponds to decreasing breathiness.\n\n::: callout-warning\nNote that using the `+` is a quirk of `ggplot()`. The idea behind it is that you start from a bare plot and you **add** (`+`) layers of data on top of it. This is because of the philosophy behind the package, called the [Layered Grammar of Graphics](http://vita.had.co.nz/papers/layered-grammar.html). In fact, Grammar of Graphics is where you get the GG in ggplot!\n:::\n\n### Function arguments\n\nNote that the `data` and `mapping` arguments don't have to be named explicitly (with `data =` and `mapping =`) in the `ggplot()` function, since they are obligatory and they are specified in that order.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  polite,\n  aes(x = f0mn, y = H1H2)\n) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](plotting-basics_files/figure-html/named-arguments-1.png){width=672}\n:::\n:::\n\n\n\n\nIn fact, you can also leave out `x =` and `y =`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  polite,\n  aes(f0mn, H1H2)\n) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](plotting-basics_files/figure-html/named-arguments-2-1.png){width=672}\n:::\n:::\n\n\n\n\nTry running `?ggplot` in the Console to see the arguments of the function and the order they appear in.\n\n::: callout-note\n#### Quiz 3\n\n\n\n\n**Which of the following will produce the same plot as the one above?** Reason through it first without running the code, then run all of these to check whether they look the way you expected. <div class='webex-radiogroup' id='radio_EXDJESGNXZ'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_EXDJESGNXZ\" value=\"\"></input> <span>`ggplot(polite, aes(H1H2, f0mn)) + geom_point()`</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_EXDJESGNXZ\" value=\"answer\"></input> <span>`ggplot(polite, aes(y = H1H2, x = f0mn)) + geom_point()`</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_EXDJESGNXZ\" value=\"\"></input> <span>`ggplot(polite, aes(y = f0mn, x = H1H2)) + geom_point()`</span></label></div>\n\n\n\n\n::: {.callout-tip collapse=\"true\"}\n#### Hint\n\nWhen specifying arguments, the order matters when not using the argument names.\n\nSo `aes(a, b)` is different from `aes(b, a)`.\n\nBut `aes(y = b, x = a)` is the same as `aes(a, b)`.\n:::\n:::\n\n### What the pipe?!\n\nThe code of the latest plot can also be written this way.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npolite |>\n  ggplot(aes(f0mn, H1H2)) +\n    geom_point()\n```\n:::\n\n\n\n\nWait, what is that thing, `|>`?\n\nIt's called a **pipe**. Think of a pipe as a teleporter.\n\nThe pipe `|>` teleports the data `polite` into the following function as the first argument. So `polite |> ggplot()` is equivalent to `ggplot(polite)`.\n\nFor now it might not make much sense using the pipe, but you will learn next week how to chain many functions one after the other using the pipe, at which point its usefulness will be more obvious.\n\nAs a sneak peek, you will be able to filter the data before plotting it, like so:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npolite |>\n  # include only rows where f0mn < 300\n  filter(f0mn < 300) |>\n  ggplot(aes(f0mn, H1H2)) +\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](plotting-basics_files/figure-html/filter-plot-pipe-1.png){width=672}\n:::\n:::\n\n\n\n\n## Changing aesthetics\n\n### `colour` aesthetic\n\nYou might notice that there seems to be two subgroups within the data: one below about 200 Hz and one above about it.\n\nIn fact, these subgroups are related to `gender`. Let's colour the points by gender then.\n\nYou can use the `colour` aesthetic to colour the points by `gender`, like so:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npolite |>\n  ggplot(aes(f0mn, H1H2, colour = gender)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![Scatter plot of mean f0 and H1-H2 difference, by gender.](plotting-basics_files/figure-html/fig-polite-gender-1.png){#fig-polite-gender width=672}\n:::\n:::\n\n\n\n\n::: callout-tip\n#### `colour` or `color`?\n\nTo make ggplot easy for users of different Englishes, it's possible to write the colour aesthetic either as the British-style `colour` or the American-style `color`! Both will get the job done.\n:::\n\nNotice how `colour = gender` must be inside the `aes()` function, because we are trying to map `colour` to the values of the column `gender`. Colours are automatically assigned to each level in `gender`.\n\nThe default colour palette is used, but you can customise it. You will learn later in the course how to create custom palettes, but you can quickly change palette using one of the `scale_colour_*()` functions.\n\nA useful function is the `scale_colour_brewer()` function. This function creates palettes based on [ColorBrewer](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3) 2.0. There are three types of palettes (see the linked website for examples):\n\n-   Sequential (`seq`): a gradient sequence of hues from lighter to darker.\n\n-   Diverging (`div`): useful when you need a neutral middle colour and sequential colours on either side of the neutral colour.\n\n-   Qualitative (`qual`): useful for categorical variables.\n\nLet's use the default qualitative palette.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npolite |>\n  ggplot(aes(f0mn, H1H2, colour = gender)) +\n  geom_point() +\n  scale_color_brewer(type = \"qual\")\n```\n\n::: {.cell-output-display}\n![Scatter plot of mean f0 and H1-H2 difference, by gender.](plotting-basics_files/figure-html/fig-polite-gender-brewer-1.png){#fig-polite-gender-brewer width=672}\n:::\n:::\n\n\n\n\nNow try changing the `palette` argument of the `scale_colour_brewer()` function to different palettes. (Check the function documentation for a list).\n\nAnother set of palettes is provided by `scale_colour_viridis_d()` (the `d` stands for \"discrete\" palette, to be used for categorical variables). Here's an example.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npolite |>\n  ggplot(aes(f0mn, H1H2, colour = gender)) +\n  geom_point() +\n  scale_color_viridis_d(option = \"B\")\n```\n\n::: {.cell-output-display}\n![Scatter plot of mean f0 and H1-H2 difference, by gender.](plotting-basics_files/figure-html/fig-polite-gender-viridis-1.png){#fig-polite-gender-viridis width=672}\n:::\n:::\n\n\n\n\n::: {.callout-important collapse=\"true\"}\n#### Extra: The default colour palette\n\nIf you want to know more about the default colour palette, check this [blog post](https://www.statology.org/ggplot-default-colors/) out.\n:::\n\n### `alpha` aesthetic\n\nAnother useful ggplot2 aesthetic is `alpha`. This aesthetic sets the transparency of the geometry: `0` means completely transparent and `1` means completely opaque.\n\nChange alpha in the code below to `0.5`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npolite |>\n  ggplot(aes(f0mn, H1H2, colour = gender)) +\n  geom_point(alpha = ...) +\n  scale_color_brewer(type = \"qual\")\n```\n:::\n\n\n\n\nWhen you are setting a value yourself that should apply to all instances of some geometry, rather than mapping an aesthetic to values in a specific column (like we did above with `colour`), you should add the aesthetic outside of `aes()` and usually in the geom function you want to modify.\n\nSetting a lower alpha is useful when there are a lot of points or other geometries that overlap with each other and it just looks like a blob of colour (you can't really see the individual geometries; you will see an example next week). It is not the case here, and in fact reducing the alpha makes the plot quite illegible!\n\n## Labels\n\nIf you want to change the labels of the axes and the legend, you can use the `labs()` function, like this.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npolite |>\n  ggplot(aes(f0mn, H1H2, colour = gender)) +\n  geom_point() +\n  labs(\n    x = \"Mean f0 (Hz)\",\n    y = \"H1-H2 difference (dB)\",\n    colour = \"Gender\"\n  )\n```\n\n::: {.cell-output-display}\n![Scatter plot of mean f0 and H1-H2 difference, by gender.](plotting-basics_files/figure-html/fig-polite-gender-labs-1.png){#fig-polite-gender-labs width=672}\n:::\n:::\n\n\n\n\nAlso add a `title` and a `subtitle` (use these two arguments within the `labs()` function).\n\n::: {.callout-tip collapse=\"true\"}\n#### Hint\n\nFor example, `labs(title = \"...\", ...)`.\n:::\n\n## Summary\n\nThat's all for this week!\n\n::: {.callout-note appearance=\"minimal\"}\n-   **ggplot2** is a plotting package from the tidyverse.\n\n-   To create a basic plot, you use the `ggplot()` function and specify `data` and `mapping`.\n\n    -   The `aes()` function allows you to specify aesthetics (like axes, colours, ...) in the `mapping` argument.\n\n    -   Geometries map data values onto shapes in the plot. All geometry functions are of the type `geom_*()`.\n\n-   **Scatter plots** are created with `geom_point()` and can be used with two numeric variables.\n:::\n\n::: callout-note\n## Next\n\n-   [Bar charts](bar-charts.qmd)\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}