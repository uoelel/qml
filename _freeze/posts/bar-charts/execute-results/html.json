{
  "hash": "51aa88053b02e6b0e6d90fad628dd1ff",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Bar charts\"\nsubtitle: \"Learn how to plot bar charts with ggplot2\"\nformat: \n  html:\n    css: [webex.css]\n    include-after-body: [webex.js]\ndate: 2024-07-15\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n::: callout-warning\n#### Prerequisites\n\n- [Plotting basics in R](plotting-basics.qmd)\n:::\n\n## Bar charts\n\n::: callout-tip\n#### Bar charts\n\n**Bar charts** are useful when you are counting things. For example:\n\n-   Number of verbs vs nouns vs adjectives in a corpus.\n\n-   Number of languages by geographic area.\n\n-   Number of correct vs incorrect responses.\n\nThe bar chart geometry is `geom_bar()`.\n:::\n\nWe will first create a plot with counts of the number of languages in `global_south` by their endangerment status and then a plot where we also split the counts by macro-area.\n\n### Number of languages of the Global South by status\n\nTo create a bar chart, you can use the `geom_bar()` geometry.\n\n::: callout-warning\n#### Bar chart axes\n\nIn a simple bar chart, **you only need to specify one axis, the *x*-axis**, in the aesthetics `aes()`.\n\nThis is because the counts that are placed on the *y*-axis are calculated by the `geom_bar()` function under the hood.\n\nThis quirk is something that confuses many new learners, so make sure you internalise this.\n:::\n\nGo ahead and complete the following code to create a bar chart.\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_south |>\n  ggplot(aes(x = status)) +\n  ...\n```\n:::\n\n\n\n\nNote how we're using `|>` to pipe the `glot_status` data frame into the `ggplot()` function. This works because `ggplot()`'s first argument is the data, and piping is a different way of providing the first argument to a function.\n\nAs mentioned above, the counting for the *y*-axis is done automatically. R looks in the `status` column and counts how many times each value in the column occurs in the data frame.\n\nIf you did things correctly, you should get the following plot.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Number of languages by endangerment status.](bar-charts_files/figure-html/fig-status-bar-1.png){#fig-status-bar width=672}\n:::\n:::\n\n\n\n\nThe *x*-axis is now `status` and the *y*-axis corresponds to the number of languages by status (`count`). As mentioned above, `count` is calculated under the hood for you (you will learn how to count levels with `count()` later in the course).\n\nYou could write a description of the plot that goes like this:\n\n> The number of languages in the Global South by endangered status is shown as a bar chart in @fig-status-bar. Among the languages that are endangered, the majority are threatened or shifting.\n\nWhat if we want to show the number of languages by endangerment status within each of the macro-areas that make up the Global South? Easy! You can make a stacked bar chart. This requires we mutate the data first.\n\n## Stacked bar charts\n\nA special type of bar charts are the so-called stacked bar charts.\n\n::: callout-tip\n#### Stacked bar chart\n\nA **stacked bar chart** is a bar chart in which each contains a \"stack\" of shorter bars, each indicating the counts of some sub-groups.\n\nThis type of plot is useful to show how counts of something vary depending on some other grouping (in other words, when you want to count the occurrences of a categorical variable based on another categorical variable). For example:\n\n-   Number of languages by endangerment status, grouped by geographic area.\n\n-   Number of infants by head-turning preference, grouped by first language.\n\n-   Number of past vs non-past verbs, grouped by verb class.\n:::\n\nTo create a stacked bar chart, you just need to add a new aesthetic mapping to `aes()`: `fill`. The `fill` aesthetic lets you fill bars or areas with different colours depending on the values of a specified column.\n\nLet's make a plot on language endangerment by macro-area.\n\nComplete the following code by specifying that `fill` should be based on `status`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_south |>\n  ggplot(aes(x = Macroarea, ...)) +\n  geom_bar()\n```\n:::\n\n\n\n\nYou should get the following.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Number of languages by macro-area and endangerment status.](bar-charts_files/figure-html/fig-status-stacked-1.png){#fig-status-stacked width=672}\n:::\n:::\n\n\n\n\nA write-up example:\n\n> @fig-status-stacked shows the number of languages by geographic macro-area, subdivided by endangerment status. Africa, Eurasia and Papunesia have substantially more languages than the other areas.\n\n::: callout-note\n#### Quiz 4\n\nWhat is wrong in the following code?\n\n``` r\ngestures |>\n  ggplot(aes(x = status), fill = Macroarea) +\n  geom_bar()\n```\n:::\n\n## Filled stacked bar charts\n\nIn the plot above it is difficult to assess whether different macro-areas have different proportions of endangerment. This is because the overall number of languages per area differs between areas.\n\nA solution to this is to plot **proportions** instead of raw counts.\n\nYou could calculate the proportions yourself, but there is a quicker way: using the `position` argument in `geom_bar()`.\n\nYou can plot proportions instead of counts by setting `position = \"fill\"` inside `geom_bar()`, like so:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_south |>\nggplot(aes(x = Macroarea, fill = status)) +\n  geom_bar(position = \"fill\")\n```\n\n::: {.cell-output-display}\n![Proportion of languages by macro-area and endangerment status.](bar-charts_files/figure-html/fig-status-stacked-2-1.png){#fig-status-stacked-2 width=672}\n:::\n:::\n\n\n\n\nThe plot now shows proportions of languages by endangerment status for each area separately.\n\nNote that the *y*-axis label is still \"count\" but should be \"proportion\". Use `labs()` to change the axes labels and the legend name.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_south |>\nggplot(aes(x = Macroarea, fill = status)) +\n  geom_bar(position = \"fill\") +\n  labs(\n    ...\n  )\n```\n:::\n\n\n\n\n::: {.callout-tip collapse=\"true\"}\n#### Hint\n\nIf to change the name of the `colour` legend, you use the `colour` argument in `labs()`, guess which argument you should use for `fill`?\n:::\n\nYou should get this.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Proportion of languages by macro-area and endangerment status.](bar-charts_files/figure-html/fig-status-stacked-3-1.png){#fig-status-stacked-3 width=672}\n:::\n:::\n\n\n\n\nWith this plot it is easier to see that different areas have different proportions of endangerment. In writing:\n\n> @fig-status-stacked-3 shows proportions of languages by endangerment status for each macro-area. Australia, South and North America have a substantially higher proportion of extinct languages than the other areas. These areas also have a higher proportion of near extinct languages. On the other hand, Africa has the greatest proportion of non-endangered languages followed by Papunesia and Eurasia, while North and South America are among the areas with the lower proportion, together with Australia which has the lowest.\n\n::: callout-note\n\n#### Next\n\n- [Faceting plots](plot-faceting.qmd)\n- [Advanced plotting](plot-advanced.qmd)\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}