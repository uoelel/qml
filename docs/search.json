[
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Set-up instructions",
    "section": "",
    "text": "Please, follow these instructions to get ready before the first workshop. It will take up to an hour to set everything up and you might encounter errors, so please do this asap."
  },
  {
    "objectID": "setup.html#r-and-rstudio",
    "href": "setup.html#r-and-rstudio",
    "title": "Set-up instructions",
    "section": "1 R and RStudio",
    "text": "1 R and RStudio\nBefore installing the necessary software, make sure you have installed or updated the following software.\n\nThe latest version of R (https://cloud.r-project.org).\nThe latest version of RStudio (https://www.rstudio.com/products/rstudio/download/#download).\nIdeally, your operating system is up-to-date."
  },
  {
    "objectID": "setup.html#r-packages",
    "href": "setup.html#r-packages",
    "title": "Set-up instructions",
    "section": "2 R packages",
    "text": "2 R packages\n\n\n\n\n\n\nImportant\n\n\n\nIf you have previously installed the C++ toolkit, CmdStan and/or cmdstanr, or if you have recently updated your OS, please follow these instructions to reinstall them.\n\n\nNow you will need to install a few packages and extra software.\nHere is an overview of what you will install:\n\nC++ toolchain.\nR packages: tidyverse, remotes, cmdstanr, brms.\nCmdStan (including Stan).\n\n\n2.1 Install the C++ toolchain\nSome of the software (CmdStan) used in the workshops require a working C++ toolchain for compilation.\nYou can find information on how to set up the C++ toolchain in Section 1.2.1 of the CmdStan User’s Guide.\nMake sure to follow the instructions for your operating system.\n\n\n2.2 Install the R packages\nAfter you have installed the C++ toolchain, you need to install the following R packages. Run the following in the Console.\ninstall.packages(\"remotes\")\nremotes::install_github(\"stan-dev/cmdstanr\")\ninstall.packages(c(\"brms\"))\ninstall.packages(c(\"tidybayes\", \"extraDistr\"))\nThe cmdstanr package is an interface between R and CmdStan (see below), while brms is the package you will use to run Bayesian linear models (think of it as the Bayesian equivalent of lme4).\nIt will take several minutes to install the packages, depending on your system and configuration.\nIf at any point you get asked about installing extra packages or software or update existing packages or software, please do so. In all cases, carefully read the message in the Console or in a pop-up window: they always tell you what to do or the options you have.\n\n\n2.3 Install CmdStan\nNow that you have installed the R packages, you need to install CmdStan.\nCmdStan is a shell interface to the programming language Stan.\nStan is what runs the Bayesian models, but you don’t have to know Stan, because you will use the R packages to run the models (those packages will communicate with Stan in your stead).\nTo install CmdStan, run the following command in the R console:\ncmdstanr::install_cmdstan(cores = parallel::detectCores(), overwrite = TRUE)\nIt will take several minutes and you will see a lot of text flashing in the Console.\n\n\n2.4 Check your installation\nRun the following in the RStudio Console.\nlibrary(cmdstanr)\nfile &lt;- file.path(cmdstan_path(), \"examples\", \"bernoulli\", \"bernoulli.stan\")\nmod &lt;- cmdstan_model(file, force_recompile = TRUE)\ndata_list &lt;- list(N = 10, y = c(0,1,0,0,0,0,0,0,0,1))\nfit &lt;- mod$sample(\n  data = data_list, \n  seed = 123, \n  chains = 4, \n  parallel_chains = 4,\n  refresh = 500 # print update every 500 iters\n)\nIf everything goes well you should see Compiling Stan program… and then Running MCMC with 4 parallel chains… followed by information on chains and iterations."
  },
  {
    "objectID": "setup.html#troubleshoot",
    "href": "setup.html#troubleshoot",
    "title": "Set-up instructions",
    "section": "3 Troubleshoot",
    "text": "3 Troubleshoot\nIf you have issues with any of these steps, please get in touch on Piazza. I won’t have time to help you during the workshop."
  },
  {
    "objectID": "posts/hodotics.html",
    "href": "posts/hodotics.html",
    "title": "Research Methods",
    "section": "",
    "text": "Research Methods are about the theory, methods and practice of conducting research. I like to call the discipline that deals with research methods Hodotics.\nOne way of categorising different aspects of research methods is represented in the following figure.\n\n\n\n\n\nYou can think of research methods as the combination of:\n\nThe research process: the process of conducting a research project, from determining the research context to communicating results.\nProject management: the process of managing a research project, from project planning to writing-up.\nDigital skills: all research involves using computers (at least at some point if not throughout) so that computer literacy and digital skills are nowadays a fundamental aspect of research.\nPhilosophy: all research is not performed in a vacuum and a lot of philosophical questions shape the entire research process.\nEthics: all research is not performed in a social vacuum and ethical considerations are a fundamental aspect of research."
  },
  {
    "objectID": "content.html",
    "href": "content.html",
    "title": "QML",
    "section": "",
    "text": "Week\nTopic\n\n\n\n\n\n\n\n\n1\nQuantitative methods and uncertainty\nSlides\nTutorial\n\n\n\n\n2\nData wrangling\nSlides\nTutorial\n\n\n\n\n3\nData visualisation\nSlides\nTutorial\n\n\n\n\n4\nStatistical modeling basics\nSlides\nTutorial\n\n\n\n\n5\nCategorical predictors\nSlides\nTutorial\nF1\n\n\n\n6 Catch up\nNo classes\n\n\n\n\n\n\n7\nBinary outcomes\nSlides\nTutorial\n\n\n\n\n8\nMultiple predictors and interactions\nSlides\nTutorial\n\nS1\n\n\n9\nContinuous predictors\nSlides\nTutorial\n\n\n\n\n10\nResearch process: an overview\nSlides\nTutorial\nF2\n\n\n\n11\nObtaining p-values (optional)\nSlides\nTutorial\n\n\n\n\n12\n\n\n\n\nS2"
  },
  {
    "objectID": "content.html#schedule-overview",
    "href": "content.html#schedule-overview",
    "title": "QML",
    "section": "",
    "text": "Week\nTopic\n\n\n\n\n\n\n\n\n1\nQuantitative methods and uncertainty\nSlides\nTutorial\n\n\n\n\n2\nData wrangling\nSlides\nTutorial\n\n\n\n\n3\nData visualisation\nSlides\nTutorial\n\n\n\n\n4\nStatistical modeling basics\nSlides\nTutorial\n\n\n\n\n5\nCategorical predictors\nSlides\nTutorial\nF1\n\n\n\n6 Catch up\nNo classes\n\n\n\n\n\n\n7\nBinary outcomes\nSlides\nTutorial\n\n\n\n\n8\nMultiple predictors and interactions\nSlides\nTutorial\n\nS1\n\n\n9\nContinuous predictors\nSlides\nTutorial\n\n\n\n\n10\nResearch process: an overview\nSlides\nTutorial\nF2\n\n\n\n11\nObtaining p-values (optional)\nSlides\nTutorial\n\n\n\n\n12\n\n\n\n\nS2"
  },
  {
    "objectID": "content.html#weekly-schedule",
    "href": "content.html#weekly-schedule",
    "title": "QML",
    "section": "2 Weekly schedule",
    "text": "2 Weekly schedule\n\n2.1 Week 1: Quantitative methods and uncertainty\n\n\n\n\n\n\nLearning Objectives\n\n\n\n\n\nQuestions\n\nWhat is quantitative data analysis?\nWhat is the inference process?\nHow can we talk about uncertainty and variability?\nWhich are the limits of quantitative methods?\n\nSkills\n\nThink critically about statistics, uncertainty and variability.\nUse R to perform simple calculations.\nMaster the basics of the programming language R.\nUse RStudio.\n\n\n\n\n\n\n\n\n\n\nHomework\n\n\n\n\n\nCourse website\n\nCarefully read the homepage.\nFamiliarise yourself with this Course content page (note that the materials will be updated throughout the course).\n\nIntake form\n\nYou must complete the intake form before coming to the Tuesday lecture.\nThe link to the form can be found on the Learn website.\n\nInstall R and RStudio\n\nFor this course, you need to install both R and RStudio.\nNOTE: If you have installed either R or RStudio prior to January 2023, please make sure you delete both R and RStudio from your laptop.\nPlease, follow the instructions in the Setup page.\n\n\n\n\n\n\n\n\n\n\nMaterials\n\n\n\n\n\n\nLecture slides.\nWorkshop tutorial.\n\n\n\n\n\n\n\n\n\n\nSuggested readings\n\n\n\n\n\nMain textbooks\n\nStatistics for Linguists with R, by Bodo Winter (S4LR) Ch. 1. [via library]\nR for Data Science (R4DS) Ch. 1, Ch. 2. [online book]\nStatistical (Re)thinking, by Richard McElreath (SReT), Ch. 1. [via library]\n\nFrom the lecture\n\nEllis and Levy 2008. Framework of Problem-Based Research: A Guide for Novice Researchers on the Development of a Research-Worthy Problem\nSilberzahn et al. 2018. Many Analysts, One Data Set: Making Transparent How Variations in Analytic Choices Affect Results\nCoretta et al. 2023. Multidimensional signals and analytic flexibility: Estimating degrees of freedom in human speech analyses\nCumming 2014. The New Statistics: Why and How\nKurschke and Liddell 2018. The Bayesian New Statistics: Hypothesis testing, estimation, meta-analysis, and power analysis from a Bayesian perspective\n\nReplication\n\n👉 Assessing the replication landscape in experimental linguistics.\nThe Stark realities of reproducible statistically orientated sociological research: Some newer rules of the sociological method.\n\nOther\n\nMethods as theory.\nMolnar 2022. Modeling Mindsets: The many cultures of learning from data.\nDarwin Holmes 2020. Researcher Positionality - A Consideration of Its Influence and Place in Qualitative Research - A New Researcher Guide\nJafar 2018. What is positionality and should it be expressed in quantitative studies?\n\n\n\n\n\n\n2.2 Week 2: Data wrangling\n\n\n\n\n\n\nLearning Objectives\n\n\n\n\n\nQuestions\n\nWhat are the types of statistical variables?\nWhich summary measures are appropriate for which types of variables?\nWhat are common measures central tendency?\nWhat are common measures of dispersion?\n\nSkills\n\nOrganise files efficiently.\nImport tabular data in R.\nObtain mean, median, mode, range and standard deviation.\nUse R scripts to save and reuse code.\n\n\n\n\n\n\n\n\n\n\nMaterials\n\n\n\n\n\n\nLecture slides.\nWorkshop tutorial.\nWorkshop files (right-click and download):\n\nshallow.csv\n\n\n\n\n\n\n\n\n\n\n\nSuggested readings\n\n\n\n\n\nMain textbooks\n\nS4LR Ch. 3. [via library]\nR4DS Ch. 3 and Ch. 4. [online book]\n\n\n\n\n\n\n2.3 Week 3: Data visualisation\n\n\n\n\n\n\nLearning Objectives\n\n\n\n\n\nQuestions\n\nWhat are the principles of good data visualisation?\nWhich are the main components of a plot?\nWhich are the appropriate plots for different types of data?\nHow can we visualise uncertainty?\n\nSkills\n\nCreate common types of plots with ggplot2.\nUse colour and shape to effectively convey meaning.\nDescribe a plot in writing and comment on observable patterns.\nCreate styled HTML reports.\n\n\n\n\n\n\n\n\n\n\nMaterials\n\n\n\n\n\n\nLecture slides.\nWorkshop tutorial.\nWorkshop files (right-click and download):\n\npolite.csv\nglot_status.rds\n\n\n\n\n\n\n\n\n\n\n\nSuggested readings\n\n\n\n\n\nMain textbooks\n\nR4DS Ch. 2. [online book]\nggplot2 documentation.\n\nFrom the lecture\n\nSpiegelhalter 2020. The Art of Statistics: Learning from Data.\n\nOther\n\nGabry et al 2019. Visualization in Bayesian workflow.\nPolitzer-Ahles and Piccini. On visualizing phonetic data from repeated measures experiments with multiple random effects.\nFundamentals of Data Visualisation.\nData viz catalogues\n\nDirectory of visualisations\nData viz catalogue\nData Viz project\nTop 50\nData Viz\n\nTutorials\n\nRaincloud plots\nLabels\nGraphic design\n\nColour\n\nColorBrewer2.\nMetBrewer\nUse colour wisely.\n\nCaveats\n\nSame stats different data.\nBehind bars.\nIssues with error bars.\nI’ve stopped using boxplots.\n\n\n\n\n\n\n\n2.4 Week 4: Statistical modeling basics\n\n\n\n\n\n\nLearning Objectives\n\n\n\n\n\nQuestions\n\nWhat are probability distributions?\nHow can we describe probability distributions with statistical parameters?\nWhat are the frequentist and Bayesian view of statistical parameters?\nHow can we estimate parameters using statistical models?\n\nSkills\n\nTransform data by creating new columns (mutate) and filtering based on specific values (filter).\nUse logical operators to transform data.\nFit a statistical model to estimate the mean and standard deviation of a Gaussian variable with brm().\nInterpret the summary of the model and understand the meaning of the reported estimates.\n\n\n\n\n\n\n\n\n\n\nMaterials\n\n\n\n\n\n\n[optional] The Golem of Prague (video lecture of SreT Ch 1).\nLecture slides.\nWorkshop tutorial.\nWorkshop files (right-click and download):\n\nalb_vot.csv\n\n\n\n\n\n\n\n\n\n\n\nSuggested readings\n\n\n\n\n\nMain textbooks\n\nR4DS Ch. 2. [online book]\nggplot2 documentation.\nS4LR Ch 3. [via library]\nSReT Ch 2, sparingly (we have not covered everything in the chapter yet). [via library]\n\nOther\nThe following resources will be helpful throughout the course. Note they cover aspects that we have not yet discussed (some will be in the following weeks, others won’t be due to time), but do bookmark these because they will be valuable when you will be working on your dissertation.\n\nLinear Models and Mixed Models with R tutorials (1 and 2) by Bodo Winter (author of S4LR) for a general overview of the type of models we focus on in this course.\nOne Thousand and One names: table with naming conventions for different types of linear models.\nLinear Models: A cheat-sheet: use this to find out which building blocks you need for your linear model.\n\n\n\n\n\n\n2.5 Week 5: Categorical predictors\n\n\n\n\n\n\nFormative assessment 1\n\n\n\n\nDUE on Thu 19 October at noon.\nFormative assessment 1 requires you to complete a few guided exercises of the type that will be included in Summative 1.\nFind instructions and data here: https://github.com/uoelel/qml-f1\n\n\n\n\n\n\n\n\n\nLearning Objectives\n\n\n\n\n\nQuestions\n\nHow do we model variables using categorical predictors?\nWhich are the most common coding systems for categorical predictors?\nHow do we interpret the model output when there are categorical predictors?\nHow can we quickly check model goodness?\n\nSkills\n\nMaster contrast coding in R for categorical predictors.\nUnderstand treatment coding.\nFit, interpret and plot models with a categorical predictor.\nReporting of model specification and results.\n\n\n\n\n\n\n\n\n\n\nMaterials\n\n\n\n\n\n\nLecture slides.\nWorkshop tutorial.\nWorkshop files (right-click and download):\n\nsenses_valence.csv\n\n\n\n\n\n\n\n\n\n\n\nSuggested readings\n\n\n\n\n\nMain textbooks\n\nR4DS Ch. 17. [online book]\nS4LR Ch 7. [via library]\nSReT Sec 5.3. [via library]\n\nOther\n\nFactors, coding and contrasts: blog post on factors in linear models. It also discusses interactions, which we will cover in Weeks 8-9.\n\n\n\n\n\n\n2.6 Week 6: Catch-up Week\n\n\n\n\n\n\nHomework\n\n\n\n\n\nThere is no homework as such, so take the time to revise the materials and/or catch up with the previous weeks’ materials.\nThere will be no classes.\n\n\n\n\n\n2.7 Week 7: Binary outcomes\n\n\n\n\n\n\nLearning Objectives\n\n\n\n\n\nQuestions\n\nHow can we visualise proportions of binary outcomes (yes/no, correct/incorrect, …)?\nWhich distribution do binary outcomes follow?\nWhat is the relationship between probabilities and log-odds?\nHow do we interpret log-odds and odds?\n\nSkills\n\nPlot binary data as proportions in ggplot2.\nPivot data from wide to long with tidyr.\nFit, interpret and plot linear models with binary outcome variables, using the Bernoulli distribution family.\nConvert between log-odds, odds and probabilities.\n\n\n\n\n\n\n\n\n\n\nMaterials\n\n\n\n\n\n\nLecture slides.\nWorkshop tutorial.\nWorkshop files (right-click and download):\n\ntakete_maluma.txt.\n\n\n\n\n\n\n\n\n\n\n\nSuggested readings\n\n\n\n\n\nMain textbooks\n\nR4DS Ch. 6. [online book]\nS4LR Ch 12. [via library]\nSReT Ch 11. [via library]\n\n\n\n\n\n\n2.8 Week 8: Multiple predictors and interactions\n\n\n\n\n\n\nSummative 1: Week 8 (Thu 9 November at noon)\n\n\n\nDue on Thursday 9 November at noon\nThe first summative contains a series of guided exercises that cover things done in Weeks 1 to 7.\nYou can find the instructions and data for the first summative here: https://github.com/uoelel/qml-s1/.\n\n\n\n\n\n\n\n\nLearning Objectives\n\n\n\n\n\nQuestions\n\nWhat is a factorial design?\nHow do we estimate and interpret the effects of multiple predictors?\nHow do we deal with situations when one predictor’s effect is different, depending on the value of the other predictor?\nHow can such interactions between predictors be built into our models?\nHow do we interpret model estimates of interactions?\n\nSkills\n\nRun and interpret models with multiple predictors.\nInterpret interactions between two predictors.\nPlot posterior and conditional probabilities from models with interactions.\nPractice transforming and back-transforming variables.\n\n\n\n\n\n\n\n\n\n\nMaterials\n\n\n\n\n\n\nLecture slides.\nWorkshop tutorial.\nWorkshop files (right-click and download):\n\nshallow.csv.\ndur-ita-pol.csv.\n\n\n\n\n\n\n\n2.9 Week 9: Continuous predictors and interactions\n\n\n\n\n\n\nLearning Objectives\n\n\n\n\n\nQuestions\n\nHow do we model predictors that aren’t categorical, but continuous?\nHow do we interpret model estimates for continuous predictors?\nHow do we fit and interpret interactions involving continuous predictors?\n\nSkills\n\nCentre continuous predictors.\nRun and interpret models with continuous predictors.\nInterpret interactions that are categorical * continuous (in the lecture) and continuous * continuous (in the tutorial).\n\n\n\n\n\n\n\n\n\n\nMaterials\n\n\n\n\n\n\nLecture slides.\nWorkshop tutorial.\nWorkshop files (right-click and download):\n\nsi.csv.\n\n\n\n\n\n\n\n2.10 Week 10: Research process - An overview\n\n\n\n\n\n\nFormative assessment 2\n\n\n\n\n\n\nDUE on Thursday 23 November at noon.\nF2 requires you to read, plot and model data. Summative 2 will have the same format.\n\n\n\n\n\n\n\n\n\n\nHomework\n\n\n\n\n\nPlease, read the following before coming to class on Wednesday (there will be no lecture on Tuesday).\n\nStroop Effect in Language\nHalf a Century of Research on the Stroop Effect: An Integrative Review, pp 163–165 plus one extra section of your choice.\n\n\n\n\n\n\n\n\n\n\nMaterials\n\n\n\n\n\n\nLecture slides.\nWorkshop tutorial.\nWorkshop files: https://github.com/uoelel/qml-stroop.\n\n\n\n\n\n\n\n\n\n\nUseful resources\n\n\n\n\n\nThe following resources are a useful summaries of conceptual, practical and terminological aspects of linear models in general.\n\nLinear Models Illustrated: a Shiny web app that illustrates linear models. Especially helpful to understand interactions.\nOne Thousand and One names: table with naming conventions for different types of linear models.\nLinear Models: A cheat-sheet: use this to find out which building blocks you need for your linear model.\n\n\n\n\n\n\n2.11 Week 11: Obtaining p-values (Optional)\n\n\n\n\n\n\nMaterials\n\n\n\n\n\n\nLecture slides.\nWorkshop tutorial.\n\n\n\n\n\n\n\n\n\n\nSuggested readings\n\n\n\n\n\n\nMotulsky 2014, Common misconceptions about data analysis and statistics.\nTressoldi et al 2015, The pervasive avoidance of prospective statistical power: Major consequences and practical solutions.\nCassidy et al 2019, Failing grade: 89 per-cent of introduction to psychology textbooks that define/explain statistical significance do so incorrectly.\nGigerenzer 2004, Mindless statistics.\nWagenmakers 2007. A practical solution to the pervasive problems of p-values.\nInterpreting (frequentist) Confidence Intervals.\n\n\n\n\n\n\n2.12 Week 12\n\n\n\n\n\n\nSummative 2: Week 12 (Thu 7 December at noon)\n\n\n\nDue on Thursday 7 December at noon\nIn the second summative assessment, you will:\n\nSelect a dataset from a list and its associated research questions.\nAnalyse the data using one linear model.\nWrite a report about the data, the model, and your findings.\n\nYou can find the instructions and data for the first summative here: https://github.com/uoelel/qml-s2/."
  },
  {
    "objectID": "assessments.html",
    "href": "assessments.html",
    "title": "QML",
    "section": "",
    "text": "This course will be self-assessed on the basis of a portfolio consisting of weekly-self reflections and a group project."
  },
  {
    "objectID": "assessments.html#assessment-overview",
    "href": "assessments.html#assessment-overview",
    "title": "QML",
    "section": "",
    "text": "This course will be self-assessed on the basis of a portfolio consisting of weekly-self reflections and a group project."
  },
  {
    "objectID": "assessments.html#weekly-self-reflections",
    "href": "assessments.html#weekly-self-reflections",
    "title": "QML",
    "section": "2 Weekly self-reflections",
    "text": "2 Weekly self-reflections"
  },
  {
    "objectID": "assessments.html#group-project",
    "href": "assessments.html#group-project",
    "title": "QML",
    "section": "3 Group project",
    "text": "3 Group project"
  },
  {
    "objectID": "assessments.html#feedback-and-marking",
    "href": "assessments.html#feedback-and-marking",
    "title": "QML",
    "section": "4 Feedback and marking",
    "text": "4 Feedback and marking\nFeedback will be provided to you (1) during class, (2) as comments on your weekly self-reflections and (3) during office hours (it is up to you to book meetings with me and/or the tutors).\nThis course is self-assessed with co-moderation, which means that at the end of the course you will assign yourself a mark and the mark will be moderated in conversation between you and the Course Organiser.\n\n\n\n\n\n\nSelf-assessment with co-moderation\n\n\n\n\nBased on your learning, you assign yourself a mark (see section on impression-based step marking.\nThe Course Organiser will moderate the self-assigned mark as part of a dialogue with you.\n\n\n\n\n4.1 Impression-based step marking\nTo help you thinking about which mark to assign yourself, we will use an “impression-based step marking” procedure. The procedure works as follows:\n\nFirst, think about the mark band you think you deserve.\nThen, choose a step within the band (see below for an explanation).\n\nOnce you pick a mark band, you need to pick a step within that band. Within each mark band, there are three steps: 2, 5 or 8 (for example, in the 60s band there is 62, 65 or 68). The criteria for each of 2, 5, or 8 are the following:\n\n\n\n\n\n\n\nStep\nCriteria\n\n\n\n\n2\nThe criteria for the mark band have been achieved, but there might be minor issues.\n\n\n5\nThe criteria for the mark band have been achieved satisfactorily.\n\n\n8\nThe criteria for the mark band have been achieved fully."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quantitative Methods for LEL",
    "section": "",
    "text": "Welcome to the main site of the course Quantitative Methods for Linguistics and English Language (Semester 1).\nThis website is your go-to place throughout the semester for any info related to the course.\n\n\n\n\n\n\nCourse description\n\n\n\nThis course is an introduction to quantitative data analysis (including data wrangling, visualisation and modelling) as commonly employed in linguistics, using the R software.\nWe will cover the following topics:\n\nThe basics of quantitative data analysis.\nData preparation.\nData summaries.\nPrinciples of data visualisation.\nStatistical modelling with linear models.\nStatistical inference using Bayesian inference (posterior probability distributions and credible intervals) and frequentist inference (p-values and confidence intervals).\n\nAt completion of the course you will have gained the following skills:\n\nImport common data formats, tidy and transform data.\nChoosing and reporting appropriate summary measures.\nUsing compelling visualisations to communicate a specific message about patterns in the data.\nMaster linear models for different types of data (continuous measures and binary outcomes).\nUsing Bayesian inference to answer research questions and avoid common interpretation pitfalls of frequentist techniques.\n\nExamples from different branches of linguistics will be used to provide you with hands-on experience in quantitative data analysis and Open Research practices.\n\n\n\n\n\n\n\n\nCourse rationale\n\n\n\nThis course is designed to help you develop the necessary skills for conducting and interpreting analyses of data as commonly employed in linguistics.\nThe content and objectives of the course are in response to recent advances in our understanding of the theory behind research methods.\nRecent meta-scientific research has identified three important aspects of research: the reproducibility, replicability and generalisability.\n\nA result is reproducible when the same analysis steps performed on the same dataset consistently produces the same answer.\nA result is replicable when the same analysis performed on different datasets produces qualitatively similar answers.\nA result is generalisable when a different analysis workflow performed on different data sets produces qualitatively similar answers.\n\nSee Definitions for a more detailed explanation.\nHowever, based on surveys from different disciplines, we are currently facing the three research crises (reproducibility, replicability and generalisability crises) by which most results are neither reproducible, nor replicable, nor generalisable (Munafò et al. 2017, Simmons et al. 2011, Ioannidis 2005, Yarkoni 2022).\nThe Open Research movement (also known as Open Science or Open Scholarship, Crüwell et al. 2019) was developed with the aim of improving our understanding of these crises and with the objective of providing researchers with guidelines and tools to produce reproducible, replicable and generalisable research.\nThe statistical philosophy adopted in the course is that of the New Statistics (Cumming 2014, Kruschke and Liddell 2018. The main goal of the New Statistics is to shift the attention from statistical significance to estimation with quantification of uncertainty.\n\n\n\n\n\n\n\n\nAsk for help\n\n\n\nIf at any point during the course you don’t feel comfortable with any aspect of the course, you are unsure about anything that has been covered in class or in your own time, you are struggling to keep up with the course workload, you are experiencing mental of physical distress due to a pre-existing or new illness, medical condition or disability, or you find yourself unable to access basic needs like food or housing, please do get in touch with me and/or the PPLS support (go to the PPLS UG or MSc Hub on SharePoint &gt; Support for students &gt; Health & Wellbeing).\nWe are humans first and the rapidly-changing new world we are living in now can put us under pressure. What is most important to me is that you are first and foremost healthy and able to participate to the course, and that you succeed and get the most out of the course.\nIt is OK not to be OK, and remember that you are not alone. Other people, teachers and students, might be struggling right now or have struggled before and might have gone through what you are going through now. Remember that support exists for you, so please do reach out. If you see somebody close to you struggling, please let them know about the available support network and encourage them to reach out.\n\n\n\n\n\n\n\n\nContacts\n\n\n\nYou can reach me (Stefano) at s.coretta@ed.ac.uk or on Teams.\nIf you want to book office hours with me or the tutors, you can do so here: https://bit.ly/33BH84L. Location depends on whom you are seeing and which day, so check the confirmation email for that info!"
  },
  {
    "objectID": "notebook.html",
    "href": "notebook.html",
    "title": "The Adventurer’s Notebook",
    "section": "",
    "text": "Research Methods\n\n\n\n\n\nResearch Methods are about the theory, methods and practice of conducting research\n\n\n\n\n\nJun 3, 2024\n\n\nStefano Coretta\n\n\n\n\n\n\n\n\n\n\n\n\nR basics\n\n\n\n\n\nLearn the basics of R, a statistical programming language.\n\n\n\n\n\nJun 3, 2024\n\n\nStefano Coretta\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/hodotics.html#research-methods",
    "href": "posts/hodotics.html#research-methods",
    "title": "Research Methods",
    "section": "",
    "text": "Research Methods are about the theory, methods and practice of conducting research. I like to call the discipline that deals with research methods Hodotics.\nOne way of categorising different aspects of research methods is represented in the following figure.\n\n\n\n\n\nYou can think of research methods as the combination of:\n\nThe research process: the process of conducting a research project, from determining the research context to communicating results.\nProject management: the process of managing a research project, from project planning to writing-up.\nDigital skills: all research involves using computers (at least at some point if not throughout) so that computer literacy and digital skills are nowadays a fundamental aspect of research.\nPhilosophy: all research is not performed in a vacuum and a lot of philosophical questions shape the entire research process.\nEthics: all research is not performed in a social vacuum and ethical considerations are a fundamental aspect of research."
  },
  {
    "objectID": "posts/hodotics.html#the-research-process",
    "href": "posts/hodotics.html#the-research-process",
    "title": "Research Methods",
    "section": "2 The research process",
    "text": "2 The research process\nLet’s zoom in on the research process.\n\n\n\n\n\n\nContext: the research context includes several aspects of the research process, including the background (i.e. the previous literature and current knowledge) and the rational of the study (from the general topic to specific research questions/hypotheses).\nData acquisition: this is the process of gathering data to be used in the study. Data acquisition covers many different types of processes, from experimental set-ups to corpus queries.\nData analysis is the process of analysing the acquired data using qualitative, quantitative or a mixed methods. This part of the research process also include interpreting the output of such analysis.\nCommunication: finally, the last step in a research process cycle is to communicate what was done and what was learned, both to the research community and to the wider public."
  },
  {
    "objectID": "posts/r-basics.html",
    "href": "posts/r-basics.html",
    "title": "R basics",
    "section": "",
    "text": "R can be used to analyse all sorts of data, from tabular data (also known as “spreadsheets”), textual data, geographic data and even images.\n\nThis course will focus on the analysis of tabular data, since all of the techniques relevant to this type of data also apply to the other types.\n\nThe R community is a very inclusive community and it’s easy to find help. There are several groups that promote R in minority/minoritised groups, like R-Ladies, Africa R, and Rainbow R just to mention a few.\nMoreover, R is open source and free!"
  },
  {
    "objectID": "posts/r-basics.html#why-r",
    "href": "posts/r-basics.html#why-r",
    "title": "R basics",
    "section": "",
    "text": "R can be used to analyse all sorts of data, from tabular data (also known as “spreadsheets”), textual data, geographic data and even images.\n\nThis course will focus on the analysis of tabular data, since all of the techniques relevant to this type of data also apply to the other types.\n\nThe R community is a very inclusive community and it’s easy to find help. There are several groups that promote R in minority/minoritised groups, like R-Ladies, Africa R, and Rainbow R just to mention a few.\nMoreover, R is open source and free!"
  },
  {
    "objectID": "posts/r-basics.html#r-vs-rstudio",
    "href": "posts/r-basics.html#r-vs-rstudio",
    "title": "R basics",
    "section": "2 R vs RStudio",
    "text": "2 R vs RStudio\nBeginners usually have trouble understanding the difference between R and RStudio.\nLet’s use a car analogy.\nWhat makes the car go is the engine and you can control the engine through the dashboard.\nYou can think of R as an engine and RStudio as the dashboard.\n\n\n\n\n\n\n\nR\n\n\n\n\nR is a programming language.\nWe use programming languages to interact with computers.\nYou run commands written in a console and the related task is executed.\n\n\n\n\n\n\n\n\n\nRStudio\n\n\n\n\nRStudio is an Integrated Development Environment or IDE.\nIt helps you using R more efficiently.\nIt has a graphical user interface or GUI.\n\n\n\nThe next section will give you a tour of RStudio."
  },
  {
    "objectID": "posts/r-basics.html#rstudio-1",
    "href": "posts/r-basics.html#rstudio-1",
    "title": "R basics",
    "section": "3 RStudio",
    "text": "3 RStudio\nWhen you open RStudio, you can see the window is divided into 3 panels:\n\nBlue (left): the Console.\nGreen (top-right): the Environment tab.\nPurple (bottom-right): the Files tab.\n\n\nThe Console is where R commands can be executed. Think of this as the interface to R.\nThe Environment tab lists the objects created with R, while in the Files tab you can navigate folders on your computer to get to files and open them in the file Editor.\n\n3.1 RStudio projects\nRStudio is an IDE (see above) which allows you to work efficiently with R, all in one place.\nNote that files and data live in folders on your computer, outside of RStudio: do not think of RStudio as an app where you can save files in.\nAll the files that you see in the Files tab are files on your computer and you can access them from the Finder or File Explorer as you would with any other file.\nIn principle, you can open RStudio and then navigate to any folder or file on your computer.\nHowever, there is a more efficient way of working with RStudio: RStudio Projects.\n\n\n\n\n\n\nRStudio Projects\n\n\n\nAn RStudio Project is a folder on your computer that has an .Rproj file.\n\n\nYou can create as many RStudio Projects as you wish, and I recommend to create one per project (your dissertation, a research project, a course, etc…).\nWe will create an RStudio Project for this course (meaning, you will create a folder for the course which will be the RStudio Project). You will have to use this project/folder throughout the semester.\nTo create a new RStudio Project, click on the button that looks like a transparent light blue box with a plus, in the top-left corner of RStudio. A window like the one below will pop up.\n\nClick on New Directory then New Project.\n\nNow, this will create a new folder (aka directory) on your computer and will make that an RStudio Project (meaning, it will add a file with the .Rproj extension to the folder; the name of the file will be the name of the project/folder).\nGive a name to your new project, something like the name of the course and year (e.g. qml-2023).\nThen you need to specify where to create this new folder/Project. Click on Browse… and navigate to the folder you want to create the new folder/Project in.\nWhen done, click on Create Project. RStudio will automatically open your new project.\n\n\n\n\n\n\n\nImportant\n\n\n\nWhen working through these tutorials, always make sure you are in the course RStudio Project you just created.\nYou know you are in an RStudio Project because you can see the name of the Project in the top-right corner of RStudio, next to the light blue cube icon.\nIf you see Project (none) in the top-right corner, that means your are not in an RStudio Project.\nTo make sure you are in the RStudio project, go to the project folder in File Explorer or Finder and double click on the .Rproj file.\n\n\nThere are several ways of opening an RStudio Project:\n\nYou can go to the RStudio Project folder in Finder or File Explorer and double click on the .Rproj file.\nYou can click on File &gt; Open Project in the RStudio menu.\nYou can click on the project name in the top-right corner of RStudio, which will bring up a list of projects. Click on the desired project to open it.\n\n\n\n3.2 A few important settings\nBefore moving on, there are a few important settings that you need to change.\n\n\nOpen the RStudio preferences (Tools &gt; Global options...).\nUn-tick Restore .RData into workspace at startup.\n\nThis mean that every time you start RStudio you are working with a clean Environment. Not restoring the workspace ensures that the code you write is fully reproducible.\n\nSelect Never in Save workspace to .RData on exit.\n\nSince we are not restoring the workspace at startup, we don’t need to save it. Remember that as long as you save the code, you will not lose any of your work! You will learn how to save code from next week.\n\nClick OK to confirm the changes.\n\n\n\n\n\n\n\nQuiz 1\n\n\n\nTrue or false?\n\nRStudio executes the code. TRUEFALSE\nR is a programming language. TRUEFALSE\nAn IDE is necessary to run R. TRUEFALSE\nRStudio projects are folders with an .Rproj file. TRUEFALSE\nThe project name is shown in the top-right corner of RStudio. TRUEFALSE"
  },
  {
    "objectID": "posts/r-basics.html#r-basics",
    "href": "posts/r-basics.html#r-basics",
    "title": "R basics",
    "section": "4 R basics",
    "text": "4 R basics\nIn this part of the tutorial you will learn the very basics of R.\nIf you have prior experience with programming, you should find all this familiar. If not, not to worry! Make sure you understand the concept highlighted in the green boxes and practice the related skills.\nFor this tutorial, you will just run code directly in the R Console in RStudio, i.e. you will type code in the Console and press ENTER to run it.\nIn future tutorials, you will learn how to save your code in a script file, so that you can keep track of which code you have run and make your work reproducible.\n\n4.1 R as a calculator\nWrite this code 1 + 2 in the Console, then press ENTER/RETURN to run the code.\nFantastic! You should see that the answer of the addition has been printed in the Console, like this:\n[1] 3\n(Never mind the [1] part for now).\nNow, try some more operations (write each of the following in the Console and press ENTER). Feel free to add your own operations to the mix!\n\n67 - 13\n2 * 4\n268 / 43\n\nYou can also chain multiple operations.\n\n6 + 4 - 1 + 2\n4 * 2 + 3 * 2\n\n\n\n\n\n\n\nQuiz 2\n\n\n\nAre the following pairs of operations equivalent?\n\n3 * 2 / 4 = 3 * (2 / 4) TRUEFALSE\n10 * 2 + 5 * 0.2 = (10 * 2 + 5) * 0.2 TRUEFALSE\n\n\n\n\n\n\n\n\n\nExtra: Arithmetics\n\n\n\n\n\nIf you need a maths refresher, I recommend checking the following pages:\n\nhttps://www.mathsisfun.com/definitions/order-of-operations.html\nhttps://www.mathsisfun.com/algebra/introduction.html\n\n\n\n\n\n\n4.2 Variables\n\nForget-me-not.\n\nMost times, we want to store a certain value so that we can use it again later.\nWe can achieve this by creating variables.\n\n\n\n\n\n\nVariable\n\n\n\nA variable holds one or more values and it’s stored in the computer memory for later use.\n\n\nYou can create a variable by using the assignment operator &lt;-.\nLet’s assign the value 156 to the variable my_num.\n\nmy_num &lt;- 156\n\nNow, check the list of variables in the Environment tab of the top-right panel of RStudio. You should see the my_num variable and its value there.\nNow, you can just call the variable back when you need it! Write the following in the Console and press ENTER.\n\nmy_num\n\n[1] 156\n\n\nA variable like my_num is also called a numeric vector: i.e. a vector that contains a number (hence numeric).\n\n\n\n\n\n\nVector\n\n\n\nA vector is an R object that contains one or more values of the same type.\n\n\nA vector is a type of variable and a numeric vector is a type of vector. However, it’s fine in most cases to use the word variable to mean vector (just note that a variable can also be something else than a vector; you will learn about other R objects from next week).\nLet’s now try some operations using variables.\n\nincome &lt;- 1200\nexpenses &lt;- 500\nincome - expenses\n\n[1] 700\n\n\nSee? You can use operations with variables too!\nAnd you can also go all the way with variables.\n\nsavings &lt;- income - expenses\n\nAnd check the value…\n\nsavings\n\n[1] 700\n\n\nVectors can hold more than one item or value.\nJust use the combine c() function to create a vector containing multiple values.\nThe following are all numeric vectors.\n\none_i &lt;- 6\n# Vector with 2 values\ntwo_i &lt;- c(6, 8)\n# Vector with 3 values\nthree_i &lt;- c(6, 8, 42)\n\nCheck the list of variables in the Environment tab. You will see now that before the values of two_i and three_i you get the vector type num for numeric. (If the vector has only one value, you don’t see the type in the Enviroment list but it is still of a specific type).\n\n\n\n\n\n\nNumeric vector\n\n\n\nA numeric vector is a vector that holds one or more numeric values.\n\n\nNote that the following are the same:\n\none_i &lt;- 6\none_i\n\n[1] 6\n\none_ii &lt;- c(6)\none_ii\n\n[1] 6\n\n\nAnother important aspect of variables is that they are… variable! Meaning that once you assign a value to one variable, you can overwrite the value by assigning a new one to the same variable.\n\nmy_num &lt;- 88\nmy_num &lt;- 63\nmy_num\n\n[1] 63\n\n\n\n\n\n\n\n\nQuiz 3\n\n\n\nTrue or false?\n\nA vector is a type of variable. TRUEFALSE\nNot all variables are vectors. TRUEFALSE\nA numeric vector can only hold numeric values. TRUEFALSE\n\n\n\n\n\n4.3 Functions\n\nR cannot function without… functions.\n\n\n\n\n\n\n\nFunction\n\n\n\nA function usually runs an operation on one or more specified arguments.\n\n\nA function in R has the form function() where:\n\nfunction is the name of the function, like sum.\n() are round parentheses, inside of which you write arguments, separated by commas.\n\nLet’s see an example:\n\nsum(3, 5)\n\n[1] 8\n\n\nThe sum() function sums the number listed as arguments. Above, the arguments are 3 and 5.\nAnd of course arguments can be vectors!\n\nmy_nums &lt;- c(3, 5, 7)\n\nsum(my_nums)\n\n[1] 15\n\nmean(my_nums)\n\n[1] 5\n\n\n\n\n\n\n\n\nQuiz 4\n\n\n\nTrue or false?\n\nFunctions can take other functions as arguments. TRUEFALSE\nAll function arguments must be specified. TRUEFALSE\nAll functions need at least one argument. TRUEFALSE\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nThe Sys.Date() function and other functions like it don’t take any arguments.\n\n\n\n\n\n\n\n\n\nExtra: R vs Python\n\n\n\n\n\nIf you are familiar with Python, you will soon realise that R and Python, although they share many concepts and types of objects, they can differ substantially. This is because R is a functional programming language (based on functions) while Python is an Object Oriented programming language (based on methods applied on objects).\nGenerally speaking, functions look like print(x) while methods look like x.print()\n\n\n\n\n\n4.4 String and logical vectors\n\nNot just numbers.\n\nWe have seen that variables can hold numeric vectors. But vectors are not restricted to being numeric. They can also store strings.\nA string is basically a set of characters (a word, a sentence, a full text).\nIn R, strings have to be quoted using double quotes \" \".\nChange the following strings to your name and surname. Remember to keep the double quotes\n\nname &lt;- \"Stefano\"\nsurname &lt;- \"Coretta\"\n\nname\n\n[1] \"Stefano\"\n\n\nStrings can be used as arguments in functions, like numbers can.\n\ncat(\"My name is\", name, surname)\n\nMy name is Stefano Coretta\n\n\nRemember that you can reuse the same variable name to override the variable value.\n\nname &lt;- \"Raj\"\n\ncat(\"My name is\", name, surname)\n\nMy name is Raj Coretta\n\n\nYou can combine multiple strings into a character vector, using c().\n\n\n\n\n\n\nCharacter vector\n\n\n\nA character vector is a vector that holds one or more strings.\n\n\n\nfruit &lt;- c(\"apple\", \"oranges\", \"bananas\")\nfruit\n\n[1] \"apple\"   \"oranges\" \"bananas\"\n\n\nCheck the Environment tab. Character vectors have chr before the values.\nAnother type of vector is one that contains either TRUE or FALSE. Vectors of this type are called logical vectors and they are listed as logi in the Environment tab.\n\n\n\n\n\n\nLogical vector\n\n\n\nA logical vector is a vector that holds one or more TRUE or FALSE values.\n\n\n\ngroceries &lt;- c(\"apple\", \"flour\", \"margarine\", \"sugar\")\nin_pantry &lt;- c(TRUE, TRUE, FALSE, TRUE)\n\ndata.frame(groceries, in_pantry)\n\n\n  \n\n\n\nTRUE and FALSE values must be written in all capitals and without double quotes (they are not strings!).\n(We will talk about data frames, another type of object in R, in the following weeks.)\n\n\n\n\n\n\nQuiz 5\n\n\n\n\nWhich of the following is not a character vector.\n\n c(1, 2, \"43\") \"s\" c(apple) (assuming apple &lt;- 45) c(letters)\n\nWhich of the following is not a logical vector.\n\n c(T, T, F) TRUE \"FALSE\" c(FALSE)\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nYou can use the class() function to check the type (“class”) of a vector.\n\nclass(FALSE)\n\n[1] \"logical\"\n\nclass(c(1, 45))\n\n[1] \"numeric\"\n\nclass(c(\"a\", \"b\"))\n\n[1] \"character\"\n\n\n\n\n\n\n\n\n\n\n\nExplanation\n\n\n\n\n\n5a\n\nc(1, 2, \"43\") is a character vector because the last number \"43\" is a string (it’s between double quotes!). A vector cannot have a mix of types of elements: they have to be all numbers or all strings or else, but not some numbers and some strings. Numbers are special in that if you include a number in a character vector without quoting it, it is automatically converted into a string. Try the following:\n\n\nchar &lt;- c(\"a\", \"b\", \"c\")\nchar &lt;- c(char, 1)\nchar\nclass(char)\n\n\nc(letters) is a character vector because letters contains the letters of the alphabet as strings (this vector comes with base R).\nc(apple) is not a character vector because the variable apple holds a number, 45!\n\n5b\n\n\"FALSE\" is not a logical vector because FALSE has been quoted (anything that is quoted is a string!).\n\n\n\n\n\n\n\n\n\n\n\n\nExtra: For-loops and if-else statements\n\n\n\n\n\nThis course does not cover programming in R in the strict sense, but if you are curious here’s a short primer on for-loops and if-else statements in R.\nFor-loops\n\nfruits &lt;- c(\"apples\", \"mangos\", \"durians\")\n\nfor (fruit in fruits) {\n  cat(\"I like\", fruit, \"\\n\")\n}\n\nI like apples \nI like mangos \nI like durians \n\n\nIf-else\n\nfor (fruit in fruits) {\n  if (grepl(\"n\", fruit)) {\n    cat(fruit, \"has an 'n'\", \"\\n\")\n  } else {\n    cat(fruit, \"does not have an 'n'\", \"\\n\")\n  }\n}\n\napples does not have an 'n' \nmangos has an 'n' \ndurians has an 'n'"
  },
  {
    "objectID": "posts/r-basics.html#summary",
    "href": "posts/r-basics.html#summary",
    "title": "R basics",
    "section": "5 Summary",
    "text": "5 Summary\nYou made it! You completed this week’s tutorial.\nHere’s a summary of what you learnt.\n\n\n\n\n\n\n\nR is a programming language while RStudio is an IDE.\nRStudio projects are folders with an .Rproj file (you can see the name of the project you are currently in in the top-right corner of RStudio).\nYou can perform mathematical operations with +, -, *, /.\nYou can store values in variables.\nA typical object to be stored in a variable is a vector: there are different type of vectors, like numeric, character and logical.\nFunctions are used to perform an operation on its arguments: sum() sums it’s arguments, mean() calculates the mean and cat() prints the arguments.\n\n\n\n\n\n\n\n\n\n\nExtra: Programming in R\n\n\n\n\n\nIf you are interested in learning about programming in R, I recommend you go through Chapters 26-28 of the R4DS book and the Advanced R book.\nNote that these topics are not covered in the course, nor will be assessed."
  }
]